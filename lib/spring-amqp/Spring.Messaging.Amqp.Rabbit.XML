<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Messaging.Amqp.Rabbit</name>
    </assembly>
    <members>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.AbstractExchangeParser">
            <summary>
            An abstract exchange parser
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.AdminParser">
            <summary>
            A admin parser.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.BindingFactoryObject">
            <summary>
            A binding factory object.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Config.BindingFactoryObject.Arguments">
            <summary>
            Sets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Config.BindingFactoryObject.RoutingKey">
            <summary>
            Sets the routing key.
            </summary>
            <value>The routing key.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Config.BindingFactoryObject.Exchange">
            <summary>
            Sets the exchange.
            </summary>
            <value>The exchange.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Config.BindingFactoryObject.DestinationQueue">
            <summary>
            Sets the destination queue.
            </summary>
            <value>The destination queue.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Config.BindingFactoryObject.DestinationExchange">
            <summary>
            Sets the destination exchange.
            </summary>
            <value>The destination exchange.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.ConnectionFactoryParser">
            <summary>
            A connection factory parser.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.DirectExchangeParser">
            <summary>
            A direct exchange parser.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.FanoutExchangeParser">
            <summary>
            A fanout exchange parser.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.HeadersExchangeParser">
            <summary>
            A headers exchange parser.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.ListenerContainerParser">
            <summary>
            A listener container parser.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.ArgumentEntryElementParser">
            <summary>
            Parses &lt;map&gt; and &lt;entry&gt; elements into a dictonary.
            <remarks>
            This class is only required because general parser functionality hasn't (yet) been exposed in the Spring.Core.ObjectDefinitionParserHelper
            class.  Once this is complete (SPRNET-2.0) this class can be eliminated and the parsing responsibility can be returned to the Spring.Core Helper class.
            </remarks>
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils">
            <summary>
            Namespace Utilities
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.SetValueIfAttributeDefined(Spring.Objects.Factory.Support.ObjectDefinitionBuilder,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Sets the value if attribute defined.
            </summary>
            <param name="builder">The builder.</param>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>True if successful, else false.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.SetValueIfAttributeDefined(Spring.Objects.Factory.Support.ObjectDefinitionBuilder,System.Xml.XmlElement,System.String)">
            <summary>
            Sets the value if attribute defined.
            </summary>
            <param name="builder">The builder.</param>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns>True if successful, else false.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.IsAttributeDefined(System.Xml.XmlElement,System.String)">
            <summary>
            Determines whether [is attribute defined] [the specified element].
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns><c>true</c> if [is attribute defined] [the specified element]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.AddConstructorArgValueIfAttributeDefined(Spring.Objects.Factory.Support.ObjectDefinitionBuilder,System.Xml.XmlElement,System.String)">
            <summary>
            Adds the constructor arg value if attribute defined.
            </summary>
            <param name="builder">The builder.</param>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns><c>true</c> if [is attribute defined] [the specified element]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.AddConstructorArgBooleanValueIfAttributeDefined(Spring.Objects.Factory.Support.ObjectDefinitionBuilder,System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Adds the constructor arg boolean value if attribute defined.
            </summary>
            <param name="builder">The builder.</param>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.AddConstructorArgRefIfAttributeDefined(Spring.Objects.Factory.Support.ObjectDefinitionBuilder,System.Xml.XmlElement,System.String)">
            <summary>
            Adds the constructor arg ref if attribute defined.
            </summary>
            <param name="builder">The builder.</param>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns><c>true</c> if [is attribute defined] [the specified element]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.AddConstructorArgParentRefIfAttributeDefined(Spring.Objects.Factory.Support.ObjectDefinitionBuilder,System.Xml.XmlElement,System.String)">
            <summary>
            Adds the constructor arg parent ref if attribute defined.
            </summary>
            <param name="builder">The builder.</param>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns><c>true</c> if [is attribute defined] [the specified element]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.SetReferenceIfAttributeDefined(Spring.Objects.Factory.Support.ObjectDefinitionBuilder,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Sets the reference if attribute defined.
            </summary>
            <param name="builder">The builder.</param>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if [is attribute defined] [the specified element]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.SetReferenceIfAttributeDefined(Spring.Objects.Factory.Support.ObjectDefinitionBuilder,System.Xml.XmlElement,System.String)">
            <summary>
            Sets the reference if attribute defined.
            </summary>
            <param name="builder">The builder.</param>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns><c>true</c> if [is attribute defined] [the specified element]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Config.NamespaceUtils.CreateElementDescription(System.Xml.XmlElement)">
            <summary>
            Creates the element description.
            </summary>
            <param name="element">The element.</param>
            <returns>The element description.</returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.QueueParser">
            <summary>
            A queue parser.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.RabbitNamespaceHandler">
            <summary>
            Namespace handler for Rabbit.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.TemplateParser">
            <summary>
            A template parser.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Config.TopicExchangeParser">
            <summary>
            A topic exchange parser.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory">
            <summary>
            A <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory"/> implementation that returns the same Connection from all
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory.CreateConnection"/> calls, and ignores call to 
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnection.Close"/>
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory">
            <summary>
            An interface based ConnectionFactory for creating <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.IConnection"/>s.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory.CreateConnection">
            <summary>
            Create a connection.
            </summary>
            <returns>
            The connection.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory.AddConnectionListener(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionListener)">
            <summary>
            Add a connection listener.
            </summary>
            <param name="listener">
            The listener.
            </param>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory.Host">
            <summary>
            Gets Host.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory.Port">
            <summary>
            Gets Port.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory.VirtualHost">
            <summary>
            Gets VirtualHost.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.rabbitConnectionFactory">
            <summary>
            The connection factory.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.connectionListener">
            <summary>
            The connection listener.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.channelListener">
            <summary>
            The channel listener.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.#ctor(RabbitMQ.Client.ConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory"/> class.
            </summary>
            <param name="rabbitConnectionFactory">
            The rabbit connection factory.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.AddConnectionListener(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionListener)">
            <summary>
            Add a connection listener.
            </summary>
            <param name="connectionListener">
            The listener.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.AddChannelListener(Spring.Messaging.Amqp.Rabbit.Connection.IChannelListener)">
            <summary>
            Add a connection listener.
            </summary>
            <param name="channelListener">
            The listener.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.CreateConnection">
            <summary>
            Create a connection.
            </summary>
            <returns>The connection.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.CreateBareConnection">
            <summary>
            Create a connection.
            </summary>
            <returns>The connection.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.GetDefaultHostName">
            <summary>
            Get the default host name.
            </summary>
            <returns>The host name.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.Dispose">
            <summary>
            Close the underlying shared connection.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.UserName">
            <summary>
            Sets UserName.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.Password">
            <summary>
            Sets Password.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.Host">
            <summary>
            Gets or sets Host.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.VirtualHost">
            <summary>
            Gets or sets VirtualHost.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.Port">
            <summary>
            Gets or sets Port.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.ChannelListener">
            <summary>
            Gets the channel listener.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.ConnectionListener">
            <summary>
            Gets the connection listener.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.ConnectionListeners">
            <summary>
            Sets the connection listeners.
            </summary>
            <value>
            The connection listeners.
            </value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.AbstractConnectionFactory.ChannelListeners">
            <summary>
            Sets the channel listeners.
            </summary>
            <value>
            The channel listeners.
            </value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel">
            <summary>
            A cached model.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IChannelProxy">
            <summary>
            A channel proxy interface.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IChannelProxy.GetTargetChannel">
            <summary>
            Return the target Channel (Model) of this proxy. This will typically be the native provider Channel (Model).
            </summary>
            <returns>
            The channel.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IChannelProxy.GetConnection">
            <summary>
            Gets the connection.
            </summary>
            <returns>The connection associated with the channel.</returns>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.target">
            <summary>
            The target.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.modelList">
            <summary>
            The model list.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.targetMonitor">
            <summary>
            The target monitor.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.transactional">
            <summary>
            The transactional flag.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.modelCacheSize">
            <summary>
            The model cache size.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.ccf">
            <summary>
            The caching connection factory.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.#ctor(RabbitMQ.Client.IModel,System.Collections.Generic.LinkedList{Spring.Messaging.Amqp.Rabbit.Connection.IChannelProxy},System.Boolean,Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel"/> class.
            </summary>
            <param name="targetModel">
            The target model.
            </param>
            <param name="channelList">
            The channel list.
            </param>
            <param name="transactional">
            The transactional.
            </param>
            <param name="ccf">
            The ccf.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.GetTargetChannel">
            <summary>
            Gets the target, return underlying channel.
            </summary>
            <value>
            The target.
            </value>
            <returns>
            The get target channel.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.Close(System.UInt16,System.String)">
            <summary>
            Close action.
            </summary>
            <param name="replyCode">
            The reply code.
            </param>
            <param name="replyText">
            The reply text.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.Close">
            <summary>
            Close action.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.TxSelect">
            <summary>
            Select the transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.LogicalClose">
            <summary>
            Logical close action.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.PhysicalClose">
            <summary>
            Physical close action.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.PhysicalClose(System.UInt16,System.String)">
            <summary>
            Physical close action.
            </summary>
            <param name="replyCode">
            The reply code.
            </param>
            <param name="replyText">
            The reply text.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.InvokeFunctionWithReconnect``1(System.Func{``0})">
            <summary>
            Invoke function with reconnect.
            </summary>
            <param name="func">
            The func.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            Type T.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.InvokeActionWithReconnect(System.Action)">
            <summary>
            Invoke action with reconnect.
            </summary>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.Dispose">
            <summary>
            Dispose action.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.Connection">
            <summary>
            Gets the connection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.DefaultConsumer">
            <summary>
            Gets or sets DefaultConsumer.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.CloseReason">
            <summary>
            Gets CloseReason.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.IsOpen">
            <summary>
            Gets a value indicating whether IsOpen.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.NextPublishSeqNo">
            <summary>
            Gets NextPublishSeqNo.
            </summary>
        </member>
        <member name="E:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.ModelShutdown">
            <summary>
            Model shutdown event handler.
            </summary>
        </member>
        <member name="E:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.BasicReturn">
            <summary>
            Basic return event handler.
            </summary>
        </member>
        <member name="E:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.BasicAcks">
            <summary>
            Basic ack event handler.
            </summary>
        </member>
        <member name="E:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.BasicNacks">
            <summary>
            Basic nack event handler.
            </summary>
        </member>
        <member name="E:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.CallbackException">
            <summary>
            Callback exception event handler.
            </summary>
        </member>
        <member name="E:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.FlowControl">
            <summary>
            Flow control event handler.
            </summary>
        </member>
        <member name="E:Spring.Messaging.Amqp.Rabbit.Connection.CachedModel.BasicRecoverOk">
            <summary>
            Basic recover ok event handler.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory">
            <summary>
            A caching connection factory implementation.  The default channel cache size is 1, please modify to 
            meet your scaling needs.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory"/> implementation that returns the same Connections from all <see cref="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory.CreateConnection"/>
            calls, and ignores calls to <see cref="M:RabbitMQ.Client.IConnection.Close"/> and caches <see cref="T:RabbitMQ.Client.IModel"/>.
            </para>
            <para>
            By default, only one Channel will be cached, with further requested Channels being created and disposed on demand.
            Consider raising the <see cref="P:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.ChannelCacheSize"/> value in case of a high-concurrency environment.
            </para>
            <para>
            <b>NOTE: This ConnectionFactory requires explicit closing of all Channels obtained form its shared Connection.</b>
            This is the usual recommendation for native Rabbit access code anyway. However, with this ConnectionFactory, its use
            is mandatory in order to actually allow for Channel reuse.
            </para>
            </remarks>
            <author>Mark Pollack</author>
            <author>Mark Fisher</author>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.channelCacheSize">
            <summary>
            The channel cache size.  Default size is 1
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.cachedChannelsNonTransactional">
            <summary>
            The cached channels.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.cachedChannelsTransactional">
            <summary>
            The caches transactional channels.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.active">
            <summary>
            Flag for active state.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.connection">
            <summary>
            The target connection.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.connectionMonitor">
            <summary>
            Synchronization monitor for the shared Connection.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/> class
            initializing the hostname to be the value returned from Dns.GetHostName() or "localhost"
            if Dns.GetHostName() throws an exception.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/> class given a host name and port
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/> class given a port
            </summary>
            <param name="port">
            The port.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/> class given a host name.
            </summary>
            <param name="hostname">The hostname.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.#ctor(RabbitMQ.Client.ConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/> class.
            </summary>
            <param name="rabbitConnectionFactory">
            The rabbit connection factory.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.AddConnectionListener(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionListener)">
            <summary>
            Add a connection listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.GetChannel(System.Boolean)">
            <summary>
            Get a channel, given a flag indicating whether it should be transactional or not.
            </summary>
            <param name="transactional">
            The transactional.
            </param>
            <returns>
            The channel.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.GetCachedChannelProxy(System.Collections.Generic.LinkedList{Spring.Messaging.Amqp.Rabbit.Connection.IChannelProxy},System.Boolean)">
            <summary>
            Wraps the given Model so that it delegates every method call to the target model but
            adapts close calls. This is useful for allowing application code to
            handle a special framework Model just like an ordinary Model.
            </summary>
            <param name="channelList">The channel list.</param>
            <param name="transactional">if set to <c>true</c> [transactional].</param>
            <returns>The wrapped Model</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.CreateBareChannel(System.Boolean)">
            <summary>
            Create a bare channel.
            </summary>
            <param name="transactional">
            The transactional.
            </param>
            <returns>
            The bare channel.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.CreateConnection">
            <summary>
            Create a connection.
            </summary>
            <returns>The connection.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.Dispose">
            <summary>
            Reset the Channel cache and underlying shared Connection, to be reinitialized on next access.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.ToString">
            <summary>
            Convert object to string representation.
            </summary>
            <returns>
            String representation of the object.
            </returns>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.ChannelCacheSize">
            <summary>
            Gets or sets ChannelCacheSize.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.Active">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory"/> is active.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory.ConnectionListeners">
            <summary>
            Sets the connection listeners.
            </summary>
            <value>The connection listeners.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.CachedChannelInvocationHandler">
            <summary>
            A cached channel invocation handler.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedChannelInvocationHandler.#ctor(RabbitMQ.Client.IModel,System.Collections.Generic.LinkedList{Spring.Messaging.Amqp.Rabbit.Connection.IChannelProxy},System.Boolean,Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.CachedChannelInvocationHandler"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="channelList">The channel list.</param>
            <param name="transactional">if set to <c>true</c> [transactional].</param>
            <param name="outer">The outer.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedChannelInvocationHandler.Invoke(AopAlliance.Intercept.IMethodInvocation)">
            <summary>
            Implement this method to perform extra treatments before and after
            the call to the supplied <paramref name="invocation"/>.
            </summary>
            <param name="invocation">The method invocation that is being intercepted.</param>
            <returns>The result of the call to the
            <see cref="M:AopAlliance.Intercept.IJoinpoint.Proceed"/> method of
            the supplied <paramref name="invocation"/>; this return value may
            well have been intercepted by the interceptor.</returns>
            <exception cref="T:System.Exception">
            If any of the interceptors in the chain or the target object itself
            throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedChannelInvocationHandler.LogicalClose(Spring.Messaging.Amqp.Rabbit.Connection.IChannelProxy)">
            <summary>
            GUARDED by ChannelList
            </summary>
            <param name="proxy">The channel to close.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CachedChannelInvocationHandler.PhysicalClose">
            <summary>
            Closes the cached channel.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy">
            <summary>
            A channel caching connection proxy.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IConnection">
            <summary>
            An interface for connections.
            </summary>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnection.CreateChannel(System.Boolean)">
            <summary>
            Create a new channel, using an internally allocated channel number.
            </summary>
            <param name="transactional">
            Transactional true if the channel should support transactions.
            </param>
            <returns>
            A new channel descriptor, or null if none is available.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnection.Close">
            <summary>
            Close this connection and all its channels with the {@link com.rabbitmq.client.AMQP#REPLY_SUCCESS} close code and message 'OK'.
            Waits for all the close operations to complete.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnection.IsOpen">
            <summary>
            Flag to indicate the status of the connection.
            </summary>
            <returns>
            True if the connection is open
            </returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionProxy">
            <summary>
            The IConnectionProxy
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionProxy.GetTargetConnection">
            <summary>
            Return the target Channel of this proxy. This will typically be the native provider IConnection
            </summary>
            <returns>
            The underlying connection (never null).
            </returns>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.target">
            <summary>
            The target connection.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.outer">
            <summary>
            The outer caching connection factory.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.#ctor(Spring.Messaging.Amqp.Rabbit.Connection.IConnection,Spring.Messaging.Amqp.Rabbit.Connection.CachingConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="outer">The outer.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.CreateBareChannel(System.Boolean)">
            <summary>
            Create a bare channel, given a flag indicating whether it should be transactional or not.
            </summary>
            <param name="transactional">The transactional.</param>
            <returns>The channel.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.CreateChannel(System.Boolean)">
            <summary>
            Create a channel, given a flag indicating whether it should be transactional or not.
            </summary>
            <param name="transactional">The transactional.</param>
            <returns>The channel.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.IsOpen">
            <summary>
            Determine if the connection is open.
            </summary>
            <returns>
            True if open, else false.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.GetTargetConnection">
            <summary>
            Get the targetconnection.
            </summary>
            <returns>The target connection.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.GetHashCode">
            <summary>
            Get the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.Equals(System.Object)">
            <summary>
            Determine equality of this object with the supplied object.
            </summary>
            <param name="obj">The obj.</param>
            <returns>True if the same, else false.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ChannelCachingConnectionProxy.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>String representation of object.</returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.CompositeChannelListener">
            <summary>
            A composite channel listener.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IChannelListener">
            <summary>
            A channel listener interface.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IChannelListener.OnCreate(RabbitMQ.Client.IModel,System.Boolean)">
            <summary>
            Called when [create].
            </summary>
            <param name="channel">The channel.</param>
            <param name="transactional">if set to <c>true</c> [transactional].</param>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CompositeChannelListener.delegates">
            <summary>
            The delegates.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CompositeChannelListener.AddDelegate(Spring.Messaging.Amqp.Rabbit.Connection.IChannelListener)">
            <summary>
            Adds the delegate.
            </summary>
            <param name="channelListener">The channel listener.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CompositeChannelListener.OnCreate(RabbitMQ.Client.IModel,System.Boolean)">
            <summary>
            Called when [create].
            </summary>
            <param name="channel">The channel.</param>
            <param name="transactional">if set to <c>true</c> [transactional].</param>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CompositeChannelListener.Delegates">
            <summary>
            Gets or sets the delegates.
            </summary>
            <value>The delegates.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.CompositeConnectionListener">
            <summary>
            A composite connection listener.
            </summary>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionListener">
            <summary>
            A connection listener.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionListener.OnCreate(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            OnCreate will be called then a connection is created.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IConnectionListener.OnClose(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            OnClose will be called when a connection is closed.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.CompositeConnectionListener.delegates">
            <summary>
            The delegates.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CompositeConnectionListener.AddDelegate(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionListener)">
            <summary>
            Adds the delegate.
            </summary>
            <param name="connectionListener">The connection listener.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CompositeConnectionListener.OnCreate(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Action to perform on create.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.CompositeConnectionListener.OnClose(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Action to perform on close.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.CompositeConnectionListener.Delegates">
            <summary>
            Sets the delegates.
            </summary>
            <value>
            The delegates.
            </value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils">
            <summary>
            Utility methods for connection factory.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.ReleaseConnection(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Release a connection.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.IsChannelTransactional(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory)">
            <summary>
            Determine whether the given RabbitMQ Channel is transactional, that is, bound to the current thread by Spring's transaction facilities.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <param name="connectionFactory">
            The connection factory.
            </param>
            <returns>
            Whether the Channel is transactional
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.GetTransactionalResourceHolder(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory,System.Boolean)">
            <summary>
            Obtain a RabbitMQ Channel that is synchronized with the current transaction, if any.
            </summary>
            <param name="connectionFactory">
            The connection factory.
            </param>
            <param name="synchedLocalTransactionAllowed">
            The synched local transaction allowed.
            </param>
            <returns>
            The transactional Channel, or null if none found.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.DoGetTransactionalResourceHolder(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory,Spring.Messaging.Amqp.Rabbit.Connection.IResourceFactory)">
            <summary>
            Obtain a RabbitMQ Channel that is synchronized with the current transaction, if any.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="resourceFactory">The resource factory.</param>
            <returns>The transactional Channel, or null if none found.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.ReleaseResources(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder)">
            <summary>
            Release the resources.
            </summary>
            <param name="resourceHolder">The resource holder.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.BindResourceToTransaction(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder,Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory,System.Boolean)">
            <summary>
            Bind a resource to a transaction.
            </summary>
            <param name="resourceHolder">The resource holder.</param>
            <param name="connectionFactory">The connection factory.</param>
            <param name="synched">The synched.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ConnectionFactoryUtils.RegisterDeliveryTag(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory,RabbitMQ.Client.IModel,System.Int64)">
            <summary>
            Register a delivery tag.
            </summary>
            <param name="connectionFactory">
            The connection factory.
            </param>
            <param name="channel">
            The channel.
            </param>
            <param name="tag">
            The tag.
            </param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.IResourceFactory">
            <summary>
            A rabbit resource factory interface.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IResourceFactory.GetChannel(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder)">
            <summary>
            Get the channel.
            </summary>
            <param name="holder">The holder.</param>
            <returns>The channel.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IResourceFactory.GetConnection(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder)">
            <summary>
            Get the connection.
            </summary>
            <param name="rabbitResourceHolder">The rabbit resource holder.</param>
            <returns>The connection.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IResourceFactory.CreateConnection">
            <summary>
            Create the connection.
            </summary>
            <returns>The connection.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.IResourceFactory.CreateChannel(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Create the channel.
            </summary>
            <param name="connection">The connection.</param>
            <returns>The channel.</returns>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.IResourceFactory.IsSynchedLocalTransactionAllowed">
            <summary>
            Gets a value indicating whether IsSynchedLocalTransactionAllowed.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder">
            <summary>
            A rabbit resource holder.
            </summary>
            <author>Mark Pollack</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.frozen">
            <summary>
            The frozen flag.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.connections">
            <summary>
            The connections.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.channels">
            <summary>
            The channels.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.channelsPerConnection">
            <summary>
            The channels per connection.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.deliveryTags">
            <summary>
            The delivery tags.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder._channelTransactional">
            <summary>
            The transactional flag.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder"/> class.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.#ctor(RabbitMQ.Client.IModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder"/> class.
            </summary>
            <param name="channel">
            The channel.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.AddConnection(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Add a connection.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.AddChannel(RabbitMQ.Client.IModel)">
            <summary>
            Add a channel.
            </summary>
            <param name="channel">
            The channel.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.AddChannel(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Add a channel.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.ContainsChannel(RabbitMQ.Client.IModel)">
            <summary>
            Determine if the channel is in the channels.
            </summary>
            <param name="channel">The channel.</param>
            <returns>True if the channel is in channels; otherwise false.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.GetConnection``1">
            <summary>
            Gets a connection.
            </summary>
            <typeparam name="T">
            T, where T is IConnection
            </typeparam>
            <returns>
            The connection.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.CommitAll">
            <summary>
            Commit all delivery tags.
            </summary>
            <exception cref="T:Spring.Messaging.Amqp.AmqpException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.CloseAll">
            <summary>
            Close all channels and connections.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.AddDeliveryTag(RabbitMQ.Client.IModel,System.Int64)">
            <summary>
            Add a delivery tag to the channel.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <param name="deliveryTag">
            The delivery tag.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.RollbackAll">
            <summary>
            Rollback all.
            </summary>
            <exception cref="T:Spring.Messaging.Amqp.AmqpException">
            </exception>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.Frozen">
            <summary>
            Gets a value indicating whether Frozen.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.IsChannelTransactional">
            <summary>
            Gets a value indicating whether IsChannelTransactional.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.Connection">
            <summary>
            Gets Connection.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder.Channel">
            <summary>
            Gets Channel.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceSynchronization">
            <summary>
            Rabbit resource synchronization implementation.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceSynchronization.transacted">
            <summary>
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceSynchronization.resourceHolder">
            <summary>
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceSynchronization.#ctor(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceSynchronization"/> class.
            </summary>
            <param name="resourceHolder">
            The resource holder.
            </param>
            <param name="resourceKey">
            The resource key.
            </param>
            <param name="transacted">
            The transacted.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceSynchronization.ShouldReleaseBeforeCompletion">
            <summary>
            Flag indicating whether the resources should be released before completion.
            </summary>
            <returns>
            True if resources should be released; False if not.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceSynchronization.ProcessResourceAfterCommit(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder)">
            <summary>
            Process resources after commit.
            </summary>
            <param name="resourceHolder">
            The resource holder.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceSynchronization.AfterCompletion(System.Int32)">
            <summary>
            Actions to be done after completion.
            </summary>
            <param name="status">
            The status.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceSynchronization.ReleaseResource(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder,System.Object)">
            <summary>
            Release the resource.
            </summary>
            <param name="resourceHolder">
            The resource holder.
            </param>
            <param name="resourceKey">
            The resource key.
            </param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils">
            <summary>
            Utility methods for conversion between Amqp.Core and RabbitMQ
            </summary>
            <author>Mark Pollack</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils.DEFAULT_PORT">
            <summary>
            The default port.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils.CloseConnection(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Closes the given Rabbit Connection and ignore any thrown exception.
            </summary>
            <remarks>This is useful for typical 'finally' blocks in manual Rabbit
            code</remarks>
            <param name="connection">The connection to close (may be nul).</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils.CloseChannel(RabbitMQ.Client.IModel)">
            <summary>
            Close the channel.
            </summary>
            <param name="channel">
            The channel.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils.CommitIfNecessary(RabbitMQ.Client.IModel)">
            <summary>
            Commit the transaction if necessary.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <exception cref="T:Spring.Messaging.Amqp.AmqpException">
            </exception>
            <exception cref="T:Spring.Messaging.Amqp.AmqpIOException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils.RollbackIfNecessary(RabbitMQ.Client.IModel)">
            <summary>
            Rollback the transaction if necessary.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <exception cref="T:Spring.Messaging.Amqp.AmqpException">
            </exception>
            <exception cref="T:Spring.Messaging.Amqp.AmqpIOException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils.ConvertRabbitAccessException(System.Exception)">
            <summary>
            Convert Rabbit Exceptions to Amqp Exceptions.
            </summary>
            <param name="ex">
            The ex.
            </param>
            <returns>
            The Exception.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils.CloseMessageConsumer(RabbitMQ.Client.IModel,System.String,System.Boolean)">
            <summary>
            Close the message consumer.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <param name="consumerTag">
            The consumer tag.
            </param>
            <param name="transactional">
            The transactional.
            </param>
            <exception cref="T:System.SystemException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.RabbitUtils.DeclareTransactional(RabbitMQ.Client.IModel)">
            <summary>
            Declare to that broker that a channel is going to be used transactionally, and convert exceptions that arise.
            </summary>
            <param name="channel">
            The channel to use.
            </param>
            <exception cref="T:System.SystemException">
            </exception>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory">
            <summary>
            Callback interface implementation.
            </summary>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory.connectionFactory">
            <summary>
            The connection factory.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory.synchedLocalTransactionAllowed">
            <summary>
            The flag indicating whether a synched local transaction is allowed.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory.#ctor(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory"/> class.
            </summary>
            <param name="connectionFactory">
            The connection factory.
            </param>
            <param name="synchedLocalTransactionAllowed">
            The synched local transaction allowed.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory.GetChannel(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder)">
            <summary>
            Gets a channel.
            </summary>
            <param name="holder">
            The holder.
            </param>
            <returns>
            The channel.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory.GetConnection(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder)">
            <summary>
            Gets a connection.
            </summary>
            <param name="holder">
            The holder.
            </param>
            <returns>
            The connection.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory.CreateConnection">
            <summary>
            Creates a connection.
            </summary>
            <returns>
            The connection.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory.CreateChannel(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Creates a channel.
            </summary>
            <param name="connection">
            The connection.
            </param>
            <returns>
            The channel.
            </returns>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Connection.ResourceFactory.IsSynchedLocalTransactionAllowed">
            <summary>
            Gets a value indicating whether IsSynchedLocalTransactionAllowed.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Connection.SimpleConnection">
            <summary>
            A Simple Connection implementation.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Connection.SimpleConnection.connectionDelegate">
            <summary>
            The connection delegate.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.SimpleConnection.#ctor(RabbitMQ.Client.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Connection.SimpleConnection"/> class.
            </summary>
            <param name="connectionDelegate">
            The connection delegate.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.SimpleConnection.CreateChannel(System.Boolean)">
            <summary>
            Create a channel, given a flag indicating whether it should be transactional or not.
            </summary>
            <param name="transactional">
            The transactional.
            </param>
            <returns>
            The channel.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.SimpleConnection.Close">
            <summary>
            Close the channel.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Connection.SimpleConnection.IsOpen">
            <summary>
            Determine if the channel is open.
            </summary>
            <returns>
            True if open, else false.
            </returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.ChannelCallbackDelegate`1">
            <summary>
            A channel callback delegate.
            </summary>
            <typeparam name="T">Type T</typeparam>
            <param name="channel">The channel.</param>
            <returns>Object of Type T.</returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener">
            <summary>
            A Channel Aware Message Listener.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelCallback`1">
            <summary>
            A Channel Callback interface.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.IChannelCallback`1.DoInRabbit(RabbitMQ.Client.IModel)">
            <summary>
            Does the in rabbit.
            </summary>
            <param name="model">The model.</param>
            <returns>An object of type T.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.IRabbitOperations">
            <summary>
            Rabbit specific methods for AMQP functionality.
            </summary>
            <author>Mark Pollack</author>
            <author>Mark Fisher</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.IRabbitOperations.Execute``1(Spring.Messaging.Amqp.Rabbit.Core.IChannelCallback{``0})">
            <summary>
            Execute the action.
            </summary>
            <param name="action">
            The action.
            </param>
            <typeparam name="T">
            Type T
            </typeparam>
            <returns>
            Object of Type T
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.IRabbitOperations.Execute``1(Spring.Messaging.Amqp.Rabbit.Core.ChannelCallbackDelegate{``0})">
            <summary>
            Execute the action.
            </summary>
            <param name="action">
            The action.
            </param>
            <typeparam name="T">
            Type T
            </typeparam>
            <returns>
            Object of Type T
            </returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor">
            <summary>
            Base implementation of a RabbitAccessor.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.logger">
            <summary>
            Logger available to subclasses.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.connectionFactory">
            <summary>
            The connection factory.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.transactional">
            <summary>
            The transactional flag.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.AfterPropertiesSet">
            <summary>
            Runs after properties are set.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.CreateConnection">
            <summary>
            Create a RabbitMQ Connection via this template's ConnectionFactory and its host and port values.
            </summary>
            <returns>
            The connection.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.GetConnection(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder)">
            <summary>
            Fetch an appropriate Connection from the given RabbitResourceHolder.
            </summary>
            <param name="holder">
            The holder.
            </param>
            <returns>
            The connection.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.GetChannel(Spring.Messaging.Amqp.Rabbit.Connection.RabbitResourceHolder)">
            <summary>
            Create the channel.
            </summary>
            <param name="holder">
            The rabbit resource holder.
            </param>
            <returns>
            The channel.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.GetTransactionalResourceHolder">
            <summary>
            Get a transactional resource holder.
            </summary>
            <returns>
            The rabbit resource holder.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.ConvertRabbitAccessException(System.Exception)">
            <summary>
            Converts a rabbit access exception.
            </summary>
            <param name="ex">
            The ex.
            </param>
            <returns>
            The system exception.
            </returns>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.ConnectionFactory">
            <summary>
            Gets or sets ConnectionFactory.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.ChannelTransacted">
            <summary>
            Gets or sets a value indicating whether ChannelTransacted.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin">
            <summary>
            RabbitMQ implementation of portable AMQP administrative operations for AMQP >= 0.8
            </summary>
            <author>Mark Pollack</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.rabbitTemplate">
            <summary>
            The rabbit template.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.running">
            <summary>
            The running flag.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.autoStartup">
            <summary>
            The auto startup flag.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.applicationContext">
            <summary>
            The application context.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.lifecycleMonitor">
            <summary>
            The lifecycle monitor.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.connectionFactory">
            <summary>
            The connection factory.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.#ctor(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin"/> class.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareExchange(Spring.Messaging.Amqp.Core.IExchange)">
            <summary>
            Declares the exchange.
            </summary>
            <param name="exchange">The exchange.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeleteExchange(System.String)">
            <summary>
            Deletes the exchange.
            </summary>
            <remarks>
            Look at implementation specific subclass for implementation specific behavior, for example
            for RabbitMQ this will delete the exchange without regard for whether it is in use or not.
            </remarks>
            <param name="exchangeName">
            Name of the exchange.
            </param>
            <returns>
            The result of deleting the exchange.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareQueue(Spring.Messaging.Amqp.Core.Queue)">
            <summary>
            Declares the queue.
            </summary>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareQueue">
            <summary>
            Declares a queue whose name is automatically named by the server.  It is created with
            exclusive = true, autoDelete=true, and durable = false.
            </summary>
            <returns>The queue.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeleteQueue(System.String)">
            <summary>
            Deletes the queue, without regard for whether it is in use or has messages on it 
            </summary>
            <param name="queueName">
            Name of the queue.
            </param>
            <returns>
            The result of deleting the queue.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeleteQueue(System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes the queue.
            </summary>
            <param name="queueName">Name of the queue.</param>
            <param name="unused">if set to <c>true</c> the queue should be deleted only if not in use.</param>
            <param name="empty">if set to <c>true</c> the queue should be deleted only if empty.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.PurgeQueue(System.String,System.Boolean)">
            <summary>
            Purges the queue.
            </summary>
            <param name="queueName">Name of the queue.</param>
            <param name="noWait">if set to <c>true</c> [no wait].</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareBinding(Spring.Messaging.Amqp.Core.Binding)">
            <summary>
            Declare the binding.
            </summary>
            <param name="binding">
            The binding.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.RemoveBinding(Spring.Messaging.Amqp.Core.Binding)">
            <summary>
            Remove a binding of a queue to an exchange.
            </summary>
            <param name="binding">Binding to remove.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.AfterPropertiesSet">
            <summary>
            Actions to perform after properties are set.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.Initialize">
            <summary>
            Declares all the exchanges, queues and bindings in the enclosing application context, if any. It should be safe
            (but unnecessary) to call this method more than once.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareExchanges(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.IExchange[])">
            <summary>
            Declare the exchanges.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <param name="exchanges">
            The exchanges.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareQueues(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Queue[])">
            <summary>
            Declare the queues.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <param name="queues">
            The queues.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.DeclareBindings(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Binding[])">
            <summary>
            Declare the bindings.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <param name="bindings">
            The bindings.
            </param>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.AutoStartup">
            <summary>
            Sets a value indicating whether AutoStartup.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.ApplicationContext">
            <summary>
            Sets ApplicationContext.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin.RabbitTemplate">
            <summary>
            Gets RabbitTemplate.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.AdminConnectionListener">
            <summary>
            An admin connection listener.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.AdminConnectionListener.outer">
            <summary>
            The outer rabbitadmin.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.AdminConnectionListener.initializing">
            <summary>
            Prevent stack overflow...
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.AdminConnectionListener.#ctor(Spring.Messaging.Amqp.Rabbit.Core.RabbitAdmin)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.AdminConnectionListener"/> class.
            </summary>
            <param name="outer">
            The outer.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.AdminConnectionListener.OnCreate(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Actions to perform on create.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.AdminConnectionListener.OnClose(Spring.Messaging.Amqp.Rabbit.Connection.IConnection)">
            <summary>
            Actions to perform on close.
            </summary>
            <param name="connection">
            The connection.
            </param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate">
            <summary>
            <para>
            Helper class that simplifies synchronous RabbitMQ access (sending and receiving messages).
            </para>
            <para>
            The default settings are for non-transactional messaging, which reduces the amount of data exchanged with the broker.
            To use a new transaction for every send or receive set the {@link #setChannelTransacted(boolean) channelTransacted}
            flag. To extend the transaction over multiple invocations (more efficient), you can use a Spring transaction to
            bracket the calls (with <code>channelTransacted=true</code> as well).
            </para>
            <para>
            The only mandatory property is the {@link #setConnectionFactory(ConnectionFactory) ConnectionFactory}. There are
            strategies available for converting messages to and from Java objects (
            {@link #setMessageConverter(MessageConverter) MessageConverter}) and for converting message headers (known as message
            properties in AMQP, see {@link #setMessagePropertiesConverter(MessagePropertiesConverter) MessagePropertiesConverter}
            ). The defaults probably do something sensible for typical use cases, as long as the message content-type is set
            appropriately.
            </para>
            <para>
            The "send" methods all have overloaded versions that allow you to explicitly target an exchange and a routing key, or
            you can set default values to be used in all send operations. The plain "receive" methods allow you to explicitly
            target a queue to receive from, or you can set a default value for the template that applies to all explicit
            receives. The convenience methods for send <b>and</b> receive use the sender defaults if no exchange or routing key
            is specified, but they always use a temporary queue for the receive leg, so the default queue is ignored.
            </para>
            </summary>
            <author>Mark Pollack</author>
            <author>Mark Fisher</author>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.DEFAULT_EXCHANGE">
            <summary>
            The default exchange.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.DEFAULT_ROUTING_KEY">
            <summary>
            The default routing key.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.DEFAULT_REPLY_TIMEOUT">
            <summary>
            The default reply timeout.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.DEFAULT_ENCODING">
            <summary>
            The default encoding.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.exchange">
            <summary>
            The exchange
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.routingKey">
            <summary>
            The routing key.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.queue">
            <summary>
            The default queue name that will be used for synchronous receives.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.replyTimeout">
            <summary>
            The reply timeout.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.messageConverter">
            <summary>
            The message converter.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.messagePropertiesConverter">
            <summary>
            The message properties converter.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.encoding">
            <summary>
            The encoding.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate"/> class. 
            Convenient constructor for use with setter injection. Don't forget to set the connection factory.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.#ctor(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate"/> class.
            Create a rabbit template with default strategies and settings.
            </summary>
            <param name="connectionFactory">
            The connection factory to use.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.InitDefaultStrategies">
            <summary>
            Set up the default strategies. Subclasses can override if necessary.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Send(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Send a message, given the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Send(System.String,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Send a message, given a routing key and the message.
            </summary>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Send(System.String,System.String,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Send a message, given an exchange, a routing key, and the message.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertAndSend(System.Object)">
            <summary>
            Convert and send a message, given the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object)">
            <summary>
            Convert and send a message, given a routing key and the message.
            </summary>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)">
            <summary>
            Convert and send a message, given an exchange, a routing key, and the message.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertAndSend(System.Object,System.Func{Spring.Messaging.Amqp.Core.Message,Spring.Messaging.Amqp.Core.Message})">
            <summary>
            Convert and send a message, given the message.
            </summary>
            <param name="message">The message.</param>
            <param name="messagePostProcessor">The message post processor.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,System.Func{Spring.Messaging.Amqp.Core.Message,Spring.Messaging.Amqp.Core.Message})">
            <summary>
            Convert and send a message, given a routing key and the message.
            </summary>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message.</param>
            <param name="messagePostProcessor">The message post processor.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,System.Func{Spring.Messaging.Amqp.Core.Message,Spring.Messaging.Amqp.Core.Message})">
            <summary>
            Convert and send a message, given an exchange, a routing key, and the message.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message.</param>
            <param name="messagePostProcessor">The message post processor.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Receive">
            <summary>
            Receive a message.
            </summary>
            <returns>The message.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Receive(System.String)">
            <summary>
            Receive a message, given the name of a queue.
            </summary>
            <param name="queueName">The queue name.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ReceiveAndConvert">
            <summary>
            Receive and convert a message.
            </summary>
            <returns>The object.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ReceiveAndConvert(System.String)">
            <summary>
            Receive and covert a message, given the name of a queue.
            </summary>
            <param name="queueName">The queue name.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.SendAndReceive(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Send and receive a message, given the message.
            </summary>
            <param name="message">The message to send.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.SendAndReceive(System.String,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Send and receive a message, given a routing key and the message.
            </summary>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message to send.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.SendAndReceive(System.String,System.String,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Send and receive a message, given an exchange, a routing key, and the message.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message to send.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertSendAndReceive(System.Object)">
            <summary>
            Convert, send, and receive a message, given the message.
            </summary>
            <param name="message">The message to send.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertSendAndReceive(System.String,System.Object)">
            <summary>
            Convert, send, and receive a message, given a routing key and the message.
            </summary>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message to send.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertSendAndReceive(System.String,System.String,System.Object)">
            <summary>
            Convert, send, and receive a message, given an exchange, a routing key and the message.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message to send.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertSendAndReceive(System.Object,System.Func{Spring.Messaging.Amqp.Core.Message,Spring.Messaging.Amqp.Core.Message})">
            <summary>
            Convert, send, and receive a message, given the message.
            </summary>
            <param name="message">The message to send.</param>
            <param name="messagePostProcessor">The message post processor.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertSendAndReceive(System.String,System.Object,System.Func{Spring.Messaging.Amqp.Core.Message,Spring.Messaging.Amqp.Core.Message})">
            <summary>
            Convert, send, and receive a message, given a routing key and the message.
            </summary>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message to send.</param>
            <param name="messagePostProcessor">The message post processor.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ConvertSendAndReceive(System.String,System.String,System.Object,System.Func{Spring.Messaging.Amqp.Core.Message,Spring.Messaging.Amqp.Core.Message})">
            <summary>
            Convert, send, and receive a message, given an exchange, a routing key and the message.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message to send.</param>
            <param name="messagePostProcessor">The message post processor.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.DoSendAndReceive(System.String,System.String,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Do the send and receive operation, given an exchange, a routing key and the message.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message to send.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Execute``1(Spring.Messaging.Amqp.Rabbit.Core.ChannelCallbackDelegate{``0})">
            <summary>
            Execute an action.
            </summary>
            <typeparam name="T">Type T</typeparam>
            <param name="action">The action.</param>
            <returns>An object of Type T</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Execute``1(Spring.Messaging.Amqp.Rabbit.Core.IChannelCallback{``0})">
            <summary>
            Execute an action.
            </summary>
            <typeparam name="T">Type T</typeparam>
            <param name="action">The action.</param>
            <returns>An object of Type T</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.DoSend(RabbitMQ.Client.IModel,System.String,System.String,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Do the send operation.
            </summary>
            <param name="channel">The channel.</param>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ChannelLocallyTransacted(RabbitMQ.Client.IModel)">
            <summary>
            Flag indicating whether the channel is locally transacted.
            </summary>
            <param name="channel">The channel.</param>
            <returns>True if locally transacted, else false.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.GetRequiredMessageConverter">
            <summary>
            Get the required message converter.
            </summary>
            <returns>The message converter.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.GetRequiredQueue">
            <summary>
            Get the required queue.
            </summary>
            <returns>The name of the queue.</returns>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Exchange">
            <summary>
            Sets Exchange. The name of the default exchange to use for send operations when none is specified. Defaults to <code>""</code>
            which is the default exchange in the broker (per the AMQP specification).
            </summary>
            <value>The exchange.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.RoutingKey">
            <summary>
            Sets RoutingKey. The value of a default routing key to use for send operations when none is specified. Default is empty which is
            not helpful when using the default (or any direct) exchange, but fine if the exchange is a headers exchange for
            instance.
            </summary>
            <value>The routing key.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Queue">
            <summary>
            Sets Queue. The name of the default queue to receive messages from when none is specified explicitly.
            </summary>
            <value>The queue.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.Encoding">
            <summary>
            Sets Encoding. The encoding to use when inter-converting between byte arrays and Strings in message properties.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.ReplyTimeout">
            <summary>
            Sets the reply timeout. Specify the timeout in milliseconds to be used when waiting for a reply Message when using one of the
            sendAndReceive methods. The default value is defined as {@link #DEFAULT_REPLY_TIMEOUT}. A negative value
            indicates an indefinite timeout. Not used in the plain receive methods because there is no blocking receive
            operation defined in the protocol.
            </summary>
            <value>The reply timeout.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.MessageConverter" -->
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate.MessagePropertiesConverter">
            <summary>
            Sets the message properties converter.
            </summary>
            <value>The message properties converter.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.AdminDefaultBasicConsumer">
            <summary>
            The admin default basic consumer.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.AdminDefaultBasicConsumer.replyHandoff">
            <summary>
            The reply handoff.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.AdminDefaultBasicConsumer.encoding">
            <summary>
            The encoding.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.AdminDefaultBasicConsumer.messagePropertiesConverter">
            <summary>
            The message properties converter.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.AdminDefaultBasicConsumer.#ctor(RabbitMQ.Client.IModel,Spring.Threading.Collections.Generic.SynchronousQueue{Spring.Messaging.Amqp.Core.Message},System.String,Spring.Messaging.Amqp.Rabbit.Support.IMessagePropertiesConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.AdminDefaultBasicConsumer"/> class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="replyHandoff">The reply handoff.</param>
            <param name="encoding">The encoding.</param>
            <param name="messagePropertiesConverter">The message properties converter.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.AdminDefaultBasicConsumer.HandleDelivery(System.String,RabbitMQ.Client.BasicGetResult,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>
            Handle delivery.
            </summary>
            <param name="consumerTag">The consumer tag.</param>
            <param name="envelope">The envelope.</param>
            <param name="properties">The properties.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.AdminDefaultBasicConsumer.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>
            Handle basic deliver.
            </summary>
            <param name="consumerTag">The consumer tag.</param>
            <param name="deliveryTag">The delivery tag.</param>
            <param name="redelivered">The redelivered.</param>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="properties">The properties.</param>
            <param name="body">The body.</param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport">
            <summary>
            Convenient super class for application classes that need Rabbit access.
            </summary>
            <remarks>
             Requires a ConnectionFactory or a RabbitTemplate instance to be set.
             It will create its own RabbitTemplate if a ConnectionFactory is passed in.
             A custom RabbitTemplate instance can be created for a given ConnectionFactory
             through overriding the <code>createNmsTemplate</code> method.
            </remarks>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.rabbitTemplate">
            <summary>
            The rabbit template.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.CreateRabbitTemplate(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory)">
            <summary>
            Creates a RabbitTemplate for the given ConnectionFactory.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <returns>The rabbit template.</returns>
            <remarks>Only invoked if populating the gateway with a ConnectionFactory reference.
            Can be overridden in subclasses to provide a different RabbitTemplate instance</remarks>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.AfterPropertiesSet">
            <summary>
            Ensures that the Rabbit Template is specified and calls <see cref="M:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.InitGateway"/>.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.InitGateway">
            <summary>
            Subclasses can override this for custom initialization behavior.
            Gets called after population of this instance's properties.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.ConnectionFactory">
            <summary>
            Gets or sets he NMS connection factory to be used by the gateway.
            Will automatically create a NmsTemplate for the given ConnectionFactory.
            </summary>
            <value>The connection factory.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Core.Support.RabbitGatewaySupport.RabbitTemplate">
            <summary>
            Gets or sets the Rabbit template for the gateway.
            </summary>
            <value>The Tabbity template.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer">
            <summary>
             An abstract message listener container.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.IContainerDelegate">
            <summary>
            An IContainerDelegate
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.IContainerDelegate.InvokeListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Invoke the listener.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.objectName">
            <summary>
            The object name.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.autoStartup">
            <summary>
            Flag for auto startup.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.phase">
            <summary>
            The phase.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.active">
            <summary>
            Flag for active.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.isRunning">
            <summary>
            Flag for running.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.lifecycleMonitor">
            <summary>
            Flag for lifecycle monitor.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.queueNames">
            <summary>
            The queues.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.errorHandler">
            <summary>
            The error handler.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.exposeListenerChannel">
            <summary>
            Flag for expose listener channel.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.messageListener">
            <summary>
            The message listener.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.acknowledgeMode">
            <summary>
            The acknowledge mode.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.initialized">
            <summary>
            Flag for initialized.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.GetRequiredQueueNames">
            <summary>
            Gets the required queue names.
            </summary>
            <returns>The required queue names.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.CheckMessageListener(System.Object)">
            <summary>
            Checks the message listener, throwing an exception
            if it does not correspond to a supported listener type.
            By default, only a <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/> object or a
            Spring <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> object will be accepted.
            </summary>
            <param name="messageListener">The message listener.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.AfterPropertiesSet">
            <summary>
            Delegates to {@link #validateConfiguration()} and {@link #initialize()}.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ValidateConfiguration">
            <summary>
            Validate the configuration of this container. The default implementation is empty. To be overridden in subclasses.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.Dispose">
            <summary>
            Calls {@link #shutdown()} when the BeanFactory destroys the container instance.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.Initialize">
            <summary>
            Initialize this container.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.Shutdown">
            <summary>
            Stop the shared Connection, call {@link #doShutdown()}, and close this container.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.DoInitialize">
            <summary>
            Register any invokers within this container. Subclasses need to implement this method for their specific invoker management process.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.DoShutdown">
            <summary>
            Close the registered invokers. Subclasses need to implement this method for their specific invoker management process. A shared Rabbit Connection, if any, will automatically be closed <i>afterwards</i>.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.Start">
            <summary>
            Start this container.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.DoStart">
            <summary>
            Start this container, and notify all invoker tasks.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.Stop">
            <summary>
            Stop this container.
            </summary>
            <exception cref="T:System.SystemException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.Stop(System.Action)">
            <summary>
            Stop this container.
            </summary>
            <param name="callback">
            The callback.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.DoStop">
            <summary>
            This method is invoked when the container is stopping. The default implementation does nothing, but subclasses may override.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.InvokeErrorHandler(System.Exception)">
            <summary>
            Invoke the registered ErrorHandler, if any. Log at error level otherwise.
            </summary>
            <param name="ex">
            The ex.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ExecuteListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Executes the specified listener,
            committing or rolling back the transaction afterwards (if necessary).
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The received message.</param>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.InvokeListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)"/>
            <see cref="!:CommitIfNecessary"/>
            <see cref="!:RollbackOnExceptionIfNecessary"/>
            <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.HandleListenerException(System.Exception)"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.InvokeListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Invokes the specified listener
            </summary>
            <param name="channel">The channel to operate on.</param>
            <param name="message">The received message.</param>
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.MessageListener"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.DoInvokeListener(Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener,RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Invoke the specified listener as Spring SessionAwareMessageListener,
            exposing a new Rabbit Channel (potentially with its own transaction)
            to the listener if demanded.
            </summary>
            <param name="listener">The Spring ISessionAwareMessageListener to invoke.</param>
            <param name="channel">The channel to operate on.</param>
            <param name="message">The received message.</param>
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/>
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ExposeListenerChannel"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.DoInvokeListener(Spring.Messaging.Amqp.Core.IMessageListener,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Invoke the specified listener a Spring Rabbit MessageListener.
            </summary>
            <remarks>Default implementation performs a plain invocation of the
            <code>OnMessage</code> methods</remarks>
            <param name="listener">The listener to invoke.</param>
            <param name="message">The received message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.IsChannelLocallyTransacted(RabbitMQ.Client.IModel)">
            <summary>
            Determines whether the given Channel is locally transacted, that is, whether
            its transaction is managed by this listener container's Channel handling
            and not by an external transaction coordinator.
            </summary>
            <remarks>
            This method is about finding out whether the Channel's transaction
            is local or externally coordinated.
            </remarks>
            <param name="channel">The channel to check.</param>
            <returns>
            <c>true</c> if the is channel locally transacted; otherwise, <c>false</c>.
            </returns>
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Core.RabbitAccessor.ChannelTransacted"/>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.HandleListenerException(System.Exception)">
            <summary>
            Handle the given exception that arose during listener execution.
            </summary>
            <remarks>
            The default implementation logs the exception at error level,
            not propagating it to the Rabbit provider - assuming that all handling of
            acknowledgement and/or transactions is done by this listener container.
            This can be overridden in subclasses.
            </remarks>
            <param name="ex">The exception to handle</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.WrapToListenerExecutionFailedExceptionIfNeeded(System.Exception)">
            <summary>
            Wrap listener execution failed exception if needed.
            </summary>
            <param name="e">
            The e.
            </param>
            <returns>
            The exception.
            </returns>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.AcknowledgeMode">
            <summary>
            <para>
            Gets or sets AcknowledgeMode. 
            Flag controlling the behaviour of the container with respect to message acknowledgement. The most common usage is
            to let the container handle the acknowledgements (so the listener doesn't need to know about the channel or the
            message).
            </para>
            <para>
            Set to {@link AcknowledgeMode#MANUAL} if the listener will send the acknowledgements itself using
            {@link Channel#basicAck(long, boolean)}. Manual acks are consistent with either a transactional or
            non-transactional channel, but if you are doing no other work on the channel at the same other than receiving a
            single message then the transaction is probably unnecessary.
            </para>
            <para>
            Set to {@link AcknowledgeMode#NONE} to tell the broker not to expect any acknowledgements, and it will assume all
            messages are acknowledged as soon as they are sent (this is "autoack" in native Rabbit broker terms). If
            {@link AcknowledgeMode#NONE} then the channel cannot be transactional (so the container will fail on start up if
            that flag is accidentally set).
            </para>
            <para> 
            @param acknowledgeMode the acknowledge mode to set. Defaults to {@link AcknowledgeMode#AUTO}
            @see AcknowledgeMode
            </para>
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.QueueNames">
            <summary>
            Gets or sets the name of the queues to receive messages from.
            </summary>
            <value>The name of the queues. Can not be null.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.Queues">
            <summary>
            Sets the queues.
            </summary>
            <value>The queues.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ExposeListenerChannel">
            <summary>
            Gets or sets a value indicating whether ExposeListenerChannel.
            Exposes the listener channel to a registered
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> as well as to
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.RabbitTemplate"/> calls.
            Default is true, reusing the listener's <see cref="T:RabbitMQ.Client.IModel"/>
            </summary>
            <value><c>true</c> if expose listener channel; otherwise, <c>false</c>.</value>
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.MessageListener">
            <summary>
            Gets or sets the message listener to register with the container.  This
            can be either a Spring <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/> object or
            a Spring <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> object.
            </summary>
            <value>The message listener.</value>
            <exception cref="T:System.ArgumentException">If the supplied listener</exception> is not a <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/> or <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ErrorHandler">
            <summary>
            Sets an ErrorHandler to be invoked in case of any uncaught exceptions thrown
            while processing a Message. By default there will be no ErrorHandler
            so that error-level logging is the only result.
            </summary>
            <value>The error handler.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.AutoStartup">
            <summary>
            Gets or sets a value indicating whether AutoStartup.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.Phase">
            <summary>
            Gets or sets Phase.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.ObjectName">
            <summary>
            Gets or sets ObjectName.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.IsActive">
            <summary>
            Gets a value indicating whether IsActive.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.AbstractMessageListenerContainer.IsRunning">
            <summary>
            Determine whether this container is currently running, that is, whether it has been started and not stopped yet.
            </summary>
            <value><c>true</c> if this component is running; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.SharedConnectionNotInitializedException">
            <summary>
            Exception that indicates that the initial setup of this container's
            shared Connection failed. This is indicating to invokers that they need
            to establish the shared Connection themselves on first access.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SharedConnectionNotInitializedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.SharedConnectionNotInitializedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.ActiveObjectCounter`1">
            <summary>
            An active object counter.
            </summary>
            <typeparam name="T">
            Type T.
            </typeparam>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.ActiveObjectCounter`1.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.ActiveObjectCounter`1.locks">
            <summary>
            A lock dictionary.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.ActiveObjectCounter`1.Add(`0)">
            <summary>
            Add the object.
            </summary>
            <param name="obj">
            The obj.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.ActiveObjectCounter`1.Release(`0)">
            <summary>
            Release the object.
            </summary>
            <param name="obj">
            The obj.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.ActiveObjectCounter`1.Await(System.TimeSpan)">
            <summary>
            Await action.
            </summary>
            <param name="timeout">
            The timeout.
            </param>
            <returns>
            True if timed out, else false.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.ActiveObjectCounter`1.GetCount">
            <summary>
            Get the count.
            </summary>
            <returns>
            The count.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.ActiveObjectCounter`1.Dispose">
            <summary>
            Dispose the locks.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException">
            <summary>
            Exception to be thrown when the execution of a listener method failed.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException"/> class, with the specified message
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.ListenerExecutionFailedException"/> class, with the specified message
            and root cause exception
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter">
            <summary>
            Message listener adapter that delegates the handling of messages to target
            listener methods via reflection, with flexible message type conversion.
            Allows listener methods to operate on message content types, completely
            independent from the Rabbit API.
            </summary>
            <remarks>
            <para>By default, the content of incoming messages gets extracted before
            being passed into the target listener method, to let the target method
            operate on message content types such as String or byte array instead of
            the raw Message. Message type conversion is delegated to a Spring
            <see cref="T:Spring.Messaging.Amqp.Support.Converter.IMessageConverter"/>. By default, a <see cref="T:Spring.Messaging.Amqp.Support.Converter.SimpleMessageConverter"/>
            will be used. (If you do not want such automatic message conversion taking
            place, then be sure to set the <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.MessageConverter"/> property
            to <code>null</code>.)
            </para>
            <para>If a target listener method returns a non-null object (typically of a
            message content type such as <code>String</code> or byte array), it will get
            wrapped in a Rabbit <code>Message</code> and sent to the exchange of the incoming message
            with the routing key that comes from the Rabbit ReplyTo property if available or via the 
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ResponseRoutingKey"/> property.
            </para>
            <para>
            The sending of response messages is only available when
            using the <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> entry point (typically through a
            Spring message listener container). Usage as a MessageListener
            does <i>not</i> support the generation of response messages.
            </para>
            <para>Consult the reference documentation for examples of method signatures compliant with this
            adapter class.
            </para>
            </remarks>
            <author>Mark Pollack</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ORIGINAL_DEFAULT_LISTENER_METHOD">
            <summary>
            The default handler method name.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.DEFAULT_RESPONSE_ROUTING_KEY">
            <summary>
            The default response routing key.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.DEFAULT_ENCODING">
            <summary>
            The default encoding.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.handlerObject">
            <summary>
            The handler object.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.defaultListenerMethod">
            <summary>
            The default listener method.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.responseRoutingKey">
            <summary>
            The default response routing key.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.responseExchange">
            <summary>
            The response exchange.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.mandatoryPublish">
            <summary>
            Flag for mandatory publish.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.immediatePublish">
            <summary>
            Flag for immediate publish.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.messageConverter">
            <summary>
            The message converter.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.messagePropertiesConverter">
            <summary>
            The message properties converter.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.encoding">
            <summary>
            The encoding.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter"/> class with default settings.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter"/> class for the given handler object
            </summary>
            <param name="handlerObject">The delegate object.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.#ctor(System.Object,Spring.Messaging.Amqp.Support.Converter.IMessageConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter"/> class.
            </summary>
            <param name="handlerObject">
            The handler object.
            </param>
            <param name="messageConverter">
            The message converter.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.OnMessage(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Rabbit <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/> entry point.
            <para>Delegates the message to the target listener method, with appropriate
            conversion of the message arguments
            </para>
            </summary>
            <remarks>
            In case of an exception, the <see cref="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.HandleListenerException(System.Exception)"/> method will be invoked.
            <b>Note</b> 
            Does not support sending response messages based on
            result objects returned from listener methods. Use the
            <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> entry point (typically through a Spring
            message listener container) for handling result objects as well.
            </remarks>
            <param name="message">The incoming message.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.OnMessage(Spring.Messaging.Amqp.Core.Message,RabbitMQ.Client.IModel)">
            <summary>
            Spring <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> entry point.
            <para>
            Delegates the message to the target listener method, with appropriate
            conversion of the message argument. If the target method returns a
            non-null object, wrap in a Rabbit message and send it back.
            </para>
            </summary>
            <param name="message">The incoming message.</param>
            <param name="channel">The channel to operate on.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.InitDefaultStrategies">
            <summary>
            Initialize the default implementations for the adapter's strategies.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.HandleListenerException(System.Exception)">
            <summary>
            Handle the given exception that arose during listener execution.
            The default implementation logs the exception at error level.
            <para>This method only applies when used with <see cref="T:Spring.Messaging.Amqp.Core.IMessageListener"/>.
            In case of the Spring <see cref="T:Spring.Messaging.Amqp.Rabbit.Core.IChannelAwareMessageListener"/> mechanism,
            exceptions get handled by the caller instead.
            </para>
            </summary>
            <param name="ex">The exception to handle.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ExtractMessage(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Extract the message body from the given message.
            </summary>
            <param name="message">The message.</param>
            <returns>the content of the message, to be passed into the
            listener method as argument</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.GetListenerMethodName(Spring.Messaging.Amqp.Core.Message,System.Object)">
            <summary>
            Gets the name of the listener method that is supposed to
            handle the given message.
            The default implementation simply returns the configured
            default listener method, if any.
            </summary>
            <param name="originalMessage">The EMS request message.</param>
            <param name="extractedMessage">The converted Rabbit request message,
            to be passed into the listener method as argument.</param>
            <returns>the name of the listener method (never <code>null</code>)</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.BuildListenerArguments(System.Object)">
            Build an array of arguments to be passed into the target listener method. Allows for multiple method arguments to
            be built from a single message object.
            <para>
            The default implementation builds an array with the given message object as sole element. This means that the
            extracted message will always be passed into a <i>single</i> method argument, even if it is an array, with the
            target method having a corresponding single argument of the array's type declared.
            </para>
            <para>
            This can be overridden to treat special message content such as arrays differently, for example passing in each
            element of the message array as distinct method argument.
            @param extractedMessage the content of the message
            @return the array of arguments to be passed into the listener method (each element of the array corresponding to
            a distinct method argument)
            </para>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.InvokeListenerMethod(System.String,System.Object[])">
            <summary>
            Invokes the specified listener method.
            </summary>
            <param name="methodName">The name of the listener method.</param>
            <param name="arguments">The message arguments to be passed in.</param>
            <returns>The result returned from the listener method.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.HandleResult(System.Object,Spring.Messaging.Amqp.Core.Message,RabbitMQ.Client.IModel)">
            <summary>
            Handles the given result object returned from the listener method, sending a response message back. 
            </summary>
            <param name="result">The result object to handle (never <code>null</code>).</param>
            <param name="request">The original request message.</param>
            <param name="channel">The channel to operate on (may be <code>null</code>).</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.GetReceivedExchange(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Get the received exchange.
            </summary>
            <param name="request">The request.</param>
            <returns>The received exchange.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.BuildMessage(RabbitMQ.Client.IModel,System.Object)">
            <summary>
            Builds a Rabbit message to be sent as response based on the given result object.
            </summary>
            <param name="channel">The Rabbit Channel to operate on.</param>
            <param name="result">The content of the message, as returned from the listener method.</param>
            <returns>the Rabbit <code>Message</code> (never <code>null</code>)</returns>
            <exception cref="T:Spring.Messaging.Amqp.Support.Converter.MessageConversionException">If there was an error in message conversion</exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.PostProcessResponse(Spring.Messaging.Amqp.Core.Message,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Post-process the given response message before it will be sent. The default implementation
            sets the response's correlation id to the request message's correlation id.
            </summary>
            <param name="request">The original incoming message.</param>
            <param name="response">The outgoing Rabbit message about to be sent.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.GetReplyToAddress(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Determine a response destination for the given message.
            </summary>
            <remarks>
            <para>The default implementation first checks the Rabbit ReplyTo
            property of the supplied request; if that is not <code>null</code>
            it is returned; if it is <code>null</code>, then the configured
            <see cref="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ResponseRoutingKey"/> default response routing key}
            is returned; if this too is <code>null</code>, then an
            <see cref="T:System.InvalidOperationException"/>is thrown.
            </para>
            </remarks>
            <param name="request">The original incoming message.</param>
            <returns>the response destination (never <code>null</code>)</returns>
            <exception cref="T:System.InvalidOperationException">if no destination can be determined.</exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.SendResponse(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Address,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Sends the given response message to the given destination.
            </summary>
            <param name="channel">The channel to operate on.</param>
            <param name="replyTo">The replyto property to determine where to send a response.</param>
            <param name="message">The outgoing message about to be sent.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.PostProcessChannel(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Post-process the given message producer before using it to send the response.
            The default implementation is empty.
            </summary>
            <param name="channel">The channel that will be used to send the message.</param>
            <param name="response">The outgoing message about to be sent.</param>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.HandlerObject">
            <summary>
            Gets or sets the handler object to delegate message listening to.
            </summary>
            <remarks>
            Specified listener methods have to be present on this target object.
            If no explicit handler object has been specified, listener
            methods are expected to present on this adapter instance, that is,
            on a custom subclass of this adapter, defining listener methods.
            </remarks>
            <value>The handler object.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.Encoding">
            <summary>
            Sets Encoding.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.DefaultListenerMethod">
            <summary>
            Gets or sets the default handler method to delegate to,
            for the case where no specific listener method has been determined.
            Out-of-the-box value is <see cref="F:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ORIGINAL_DEFAULT_LISTENER_METHOD"/> ("HandleMessage"}.
            </summary>
            <value>The default handler method.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ResponseRoutingKey">
            <summary>
            Sets the routing key to use when sending response messages. This will be applied
            in case of a request message that does not carry a "ReplyTo" property.
            Response destinations are only relevant for listener methods that return
            result objects, which will be wrapped in a response message and sent to a
            response destination.
            </summary>
            <value>The default ReplyTo value.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ResponseExchange">
            <summary>
            Sets ResponseExchange. Set the exchange to use when sending response messages. This is only used if the exchange from the received message is null.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.MessageConverter">
            <summary>
            Gets or sets the message converter that will convert incoming Rabbit messages to
            listener method arguments, and objects returned from listener
            methods back to Rabbit messages.
            </summary>
            <remarks>
            <para>The default converter is a {@link SimpleMessageConverter}, which is able
            to handle Byte arrays and strings.
            </para>
            </remarks>
            <value>The message converter.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.MandatoryPublish">
            <summary>
            Sets a value indicating whether MandatoryPublish.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Adapter.MessageListenerAdapter.ImmediatePublish">
            <summary>
            Sets a value indicating whether ImmediatePublish.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer">
            <summary>
            Specialized consumer encapsulating knowledge of the broker connections and having its own lifecycle (start and stop).
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.deliveryTags">
            <summary>
            The delivery tags.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.#ctor(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory,Spring.Messaging.Amqp.Rabbit.Support.IMessagePropertiesConverter,Spring.Messaging.Amqp.Rabbit.Listener.ActiveObjectCounter{Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer},Spring.Messaging.Amqp.Core.AcknowledgeModeUtils.AcknowledgeMode,System.Boolean,System.Int32,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer"/> class.  Create a consumer. The consumer must not attempt to use the connection factory or communicate with the broker until it is started.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="messagePropertiesConverter">The message properties converter.</param>
            <param name="activeObjectCounter">The active object counter.</param>
            <param name="acknowledgeMode">The acknowledge mode.</param>
            <param name="transactional">if set to <c>true</c> [transactional].</param>
            <param name="prefetchCount">The prefetch count.</param>
            <param name="queues">The queues.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.CheckShutdown">
            <summary>
            Check if we are in shutdown mode and if so throw an exception.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.Handle(Spring.Messaging.Amqp.Rabbit.Listener.Delivery)">
            <summary>
            Handle the delivery.
            </summary>
            <param name="delivery">The delivery.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.NextMessage">
            <summary>
            Main application-side API: wait for the next message delivery and return it.
            </summary>
            <returns>
            The next message.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.NextMessage(System.TimeSpan)">
            <summary>
            Main application-side API: wait for the next message delivery and return it.
            </summary>
            <param name="timeout">
            The timeout.
            </param>
            <returns>
            The next message.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.Stop">
            <summary>
            Stop the channel.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.RollbackOnExceptionIfNecessary(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message,System.Exception)">
            <summary>
            Perform a rollback, handling rollback excepitons properly.
            </summary>
            <param name="channel">
            The channel to rollback.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="ex">
            The thrown application exception.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.CommitIfNecessary(System.Boolean)">
            <summary>
            Perform a commit or message acknowledgement, as appropriate
            </summary>
            <param name="locallyTransacted">if set to <c>true</c> [locally transacted].</param>
            <returns>True if committed, else false.</returns>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.Channel">
            <summary>
            Gets the channel.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer.ConsumerTag">
            <summary>
            Retrieve the consumer tag this consumer is
            registered as; to be used when discussing this consumer
            with the server, for instance with
            IModel.BasicCancel().
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.InternalConsumer">
            <summary>
            An internal consumer.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.InternalConsumer.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.InternalConsumer.outer">
            <summary>
            The outer blocking queue consumer.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.InternalConsumer.#ctor(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.InternalConsumer"/> class.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <param name="outer">
            The outer.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.InternalConsumer.HandleModelShutdown(System.String,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>
            Handle model shutdown, given a consumerTag.
            </summary>
            <param name="consumerTag">
            The consumer tag.
            </param>
            <param name="sig">
            The sig.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.InternalConsumer.HandleBasicCancelOk(System.String)">
            <summary>
            Handle cancel ok.
            </summary>
            <param name="consumerTag">
            The consumer tag.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.InternalConsumer.HandleBasicDeliver(System.String,RabbitMQ.Client.BasicGetResult,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>
            Handle basic deliver.
            </summary>
            <param name="consumerTag">The consumer tag.</param>
            <param name="envelope">The envelope.</param>
            <param name="properties">The properties.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.InternalConsumer.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>
            Handle basic deliver.
            </summary>
            <param name="consumerTag">
            The consumer tag.
            </param>
            <param name="deliveryTag">
            The delivery tag.
            </param>
            <param name="redelivered">
            The redelivered.
            </param>
            <param name="exchange">
            The exchange.
            </param>
            <param name="routingKey">
            The routing key.
            </param>
            <param name="properties">
            The properties.
            </param>
            <param name="body">
            The body.
            </param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.Delivery">
            <summary>
            Encapsulates an arbitrary message - simple "object" holder structure.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Delivery.envelope">
            <summary>
            The envelope.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Delivery.properties">
            <summary>
            The properties.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.Delivery.body">
            <summary>
            The body.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.Delivery.#ctor(RabbitMQ.Client.BasicGetResult,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.Delivery"/> class.
            </summary>
            <param name="envelope">
            The envelope.
            </param>
            <param name="properties">
            The properties.
            </param>
            <param name="body">
            The body.
            </param>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Delivery.Envelope">
            <summary>
            Gets Envelope.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Delivery.Properties">
            <summary>
            Gets Properties.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.Delivery.Body">
            <summary>
            Gets Body.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.FatalListenerExecutionException">
            <summary>
            Exception to be thrown when the execution of a listener method failed unrecoverably.
            </summary>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.FatalListenerExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.FatalListenerExecutionException"/> class.
            </summary>
            <param name="msg">
            The msg.
            </param>
            <param name="cause">
            The cause.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.FatalListenerExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.FatalListenerExecutionException"/> class.
            </summary>
            <param name="msg">
            The msg.
            </param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.FatalListenerStartupException">
            <summary>
            Exception to be thrown when the execution of a listener method failed on startup.
            </summary>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.FatalListenerStartupException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.FatalListenerStartupException"/> class.
            </summary>
            <param name="msg">
            The msg.
            </param>
            <param name="cause">
            The cause.
            </param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.MessageRejectedWhileStoppingException">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer">
            <summary>
            A simple message listener container.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DEFAULT_RECEIVE_TIMEOUT">
            <summary>
            The default receive timeout.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DEFAULT_PREFETCH_COUNT">
            <summary>
            The default prefetch count.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DEFAULT_SHUTDOWN_TIMEOUT">
            <summary>
            The default shutdown timeout.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DEFAULT_RECOVERY_INTERVAL">
            <summary>
            The default recovery interval. 5000 ms = 5 seconds.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.prefetchCount">
            <summary>
            The prefetch count.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.txSize">
            <summary>
            The transaction size.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.concurrentConsumers">
            <summary>
            The concurrent consumers.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.receiveTimeout">
            <summary>
            The receive timeout.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.shutdownTimeout">
            <summary>
            The default shutdown timeout.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.recoveryInterval">
            <summary>
            The default recovery interval.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.consumers">
            <summary>
            The consumers.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.consumersMonitor">
            <summary>
            The consumers monitor.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.transactionManager">
            <summary>
            The transaction manager.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.transactionAttribute">
            <summary>
            The transaction attribute.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.adviceChain">
            <summary>
            The advice chain.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.cancellationLock">
            <summary>
            The cancellation lock.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.messagePropertiesConverter">
            <summary>
            The message properties converter.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.proxy">
            <summary>
            The proxy.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer"/> class.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.#ctor(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer"/> class.
            </summary>
            <param name="connectionFactory">
            The connection factory.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.ValidateConfiguration">
            <summary>
            Validate the configuration.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.InitializeProxy">
            <summary>
            Initialize the proxy.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DoInitialize">
            <summary>
            Creates the specified number of concurrent consumers, in the from of a Rabbit Channel
            plus associated MessageConsumer
            process.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DoStart">
            <summary>
            Perform start actions.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DoStop">
            <summary>
            Perform stop actions.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DoShutdown">
            <summary>
            Perform shutdown actions.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.InitializeConsumers">
            <summary>
            Initialize the consumers.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.IsChannelLocallyTransacted(RabbitMQ.Client.IModel)">
            <summary>
            Determine if channel is locally transacted.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <returns>
            True if locally transacted, else false.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.CreateBlockingQueueConsumer">
            <summary>
            Create a blocking queue consumer.
            </summary>
            <returns>
            The blocking queue consumer.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.Restart(Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer)">
            <summary>
            Restart the consumer.
            </summary>
            <param name="consumer">
            The consumer.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.ReceiveAndExecute(Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer)">
            <summary>
            Receive and execute.
            </summary>
            <param name="consumer">
            The consumer.
            </param>
            <returns>
            True if a message was received.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.DoReceiveAndExecute(Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer)">
            <summary>
            Perform receive and execute actions.
            </summary>
            <param name="consumer">
            The consumer.
            </param>
            <returns>
            True if a message was received.
            </returns>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.AdviceChain">
            <summary>
            Sets the advice chain.
            </summary>
            <value>The advice chain.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.RecoveryInterval">
            <summary>
            Sets RecoveryInterval.
            </summary>
            <value>The recovery interval.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.ConcurrentConsumers">
            <summary>
            Sets the number of concurrent consumers to create.  Default is 1.
            </summary>
            <remarks>
            Raising the number of concurrent consumers is recommended in order
            to scale the consumption of messages coming in from a queue. However,
            note that any ordering guarantees are lost once multiple consumers are
            registered. In general, stick with 1 consumer for low-volume queues.
            </remarks>
            <value>The concurrent consumers.</value>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.ReceiveTimeout">
            <summary>
            Sets ReceiveTimeout.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.ShutdownTimeout">
            <summary>
            Sets ShutdownTimeout.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.PrefetchCount">
            <summary>
            Sets PrefetchCount.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.TxSize">
            <summary>
            Sets TxSize.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.TransactionManager">
            <summary>
            Sets TransactionManager.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.TransactionAttribute">
            <summary>
            Sets TransactionAttribute.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.SharedConnectionEnabled">
            <summary>
            Gets a value indicating whether SharedConnectionEnabled.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer.ActiveConsumerCount">
            <summary>
            Gets ActiveConsumerCount.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer">
            <summary>
            An asynchronous message processing consumer.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.consumer">
            <summary>
            The consumer.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.start">
            <summary>
            The start countdown latch.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.startupException">
            <summary>
            The startup exception.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.outer">
            <summary>
            The outer simple message listener container.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.#ctor(Spring.Messaging.Amqp.Rabbit.Listener.BlockingQueueConsumer,Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer"/> class.
            </summary>
            <param name="consumer">
            The consumer.
            </param>
            <param name="outer">
            The outer.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.GetStartupException">
            <summary>
            Retrieve the fatal startup exception if this processor completely failed to locate the broker resources it
            needed. Blocks up to 60 seconds waiting (but should always return promptly in normal circumstances).
            </summary>
            <returns>
            A startup exception if there was one.
            </returns>
            <exception cref="T:System.TimeoutException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.Run">
            <summary>
            Execute Run.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.InvokeListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Invoke the listener.
            </summary>
            <param name="channel">
            The channel.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.AsyncMessageProcessingConsumer.HandleStartupFailure(System.Exception)">
            <summary>
            Handle a startup failure.
            Wait for a period determined by the {@link #setRecoveryInterval(long) recoveryInterval} to give the container a
            chance to recover from consumer startup failure, e.g. if the broker is down.
            </summary>
            <param name="t">
            The t.
            </param>
            <exception cref="T:Spring.Messaging.Amqp.AmqpException">
            </exception>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Listener.ContainerDelegate">
            <summary>
            A container delegate.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Listener.ContainerDelegate.outer">
            <summary>
            The outer simple message listener container.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.ContainerDelegate.#ctor(Spring.Messaging.Amqp.Rabbit.Listener.SimpleMessageListenerContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Listener.ContainerDelegate"/> class.
            </summary>
            <param name="outer">The outer.</param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Listener.ContainerDelegate.InvokeListener(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Invoke the listener.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Retry.IMessageKeyGenerator">
            <summary>
            A message key generator interface.
            </summary>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Retry.IMessageKeyGenerator.GetKey(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Generate a unique key for the message that is repeatable on redelivery. Implementations should be very careful
            about assuming uniqueness of any element of the message, especially considering the requirement that it be
            repeatable. A message id is ideal, but may not be present (AMQP does not mandate it), and the message body is a
            byte array whose contents might be repeatable, but its object value is not.
            </summary>
            <param name="message">
            The message to generate a key for.
            </param>
            <returns>
            A unique key for this message.
            </returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Retry.IMessageRecoverer">
            <summary>
            A message recoverer interface.
            </summary>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Retry.IMessageRecoverer.Recover(Spring.Messaging.Amqp.Core.Message,System.Exception)">
            <summary>
            Callback for message that was consumed but failed all retry attempts.
            </summary>
            <param name="message">
            The message to recover.
            </param>
            <param name="cause">
            The cause of the error.
            </param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Retry.INewMessageIdentifier">
            <summary>
            An optimization for stateful retry of message processing. If a message is known to be "new", i.e. never consumed
            before by this or any other client, then there are potential optimizations for managing the state associated with
            tracking the processing of a message (e.g. there is no need to check a cache for a hit).
            </summary>
            <author>Dave Syer</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Retry.INewMessageIdentifier.IsNew(Spring.Messaging.Amqp.Core.Message)">
            <summary>
            Query a message to see if it has been seen before. Usually it is only possible to know if it has definitely not
            been seen before (e.g. through the redelivered flag, which would be used by default). Clients can customize the</summary>
            retry behaviour for failed messages by implementing this method.
            <param name="message">
            The message.
            </param>
            <returns>
            True if the message is known to not have been consumed before.
            </returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Support.DateExtensions">
            <summary>
            Date Extension Methods
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Support.DateExtensions.ToAmqpTimestamp(System.DateTime)">
            <summary>
            Helper method to convert from DateTime to AmqpTimestamp.
            </summary>
            <param name="datetime">
            The datetime.
            </param>
            <returns>
            The AmqpTimestamp.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Support.DateExtensions.ToDateTime(RabbitMQ.Client.AmqpTimestamp)">
            <summary>
            Helper method to convert from AmqpTimestamp.UnixTime to a DateTime (for the local machine).
            </summary>
            <param name="timestamp">
            The timestamp.
            </param>
            <returns>
            The DateTime.
            </returns>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Support.DefaultMessagePropertiesConverter">
            <summary>
            Default implementation of the {@link MessagePropertiesConverter} strategy.
            </summary>
            <author>Mark Fisher</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Support.IMessagePropertiesConverter">
            <summary>
            Strategy interface for converting between Spring AMQP {@link MessageProperties}
            and RabbitMQ BasicProperties.
            </summary>
            <author>Mark Fisher</author>
            <author>Joe Fitzgerald</author>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Support.IMessagePropertiesConverter.ToMessageProperties(RabbitMQ.Client.IBasicProperties,RabbitMQ.Client.BasicGetResult,System.String)">
            <summary>
            Toes the message properties.
            </summary>
            <param name="source">The source.</param>
            <param name="envelope">The envelope.</param>
            <param name="charset">The charset.</param>
            <returns>The message properties.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Support.IMessagePropertiesConverter.FromMessageProperties(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.MessageProperties,System.String)">
            <summary>
            Froms the message properties.
            </summary>
            <param name="channel">The channel.</param>
            <param name="source">The source.</param>
            <param name="charset">The charset.</param>
            <returns>The basic properties.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Support.DefaultMessagePropertiesConverter.ToMessageProperties(RabbitMQ.Client.IBasicProperties,RabbitMQ.Client.BasicGetResult,System.String)">
            <summary>
            Converts from BasicProperties to MessageProperties.
            </summary>
            <param name="source">The source.</param>
            <param name="envelope">The envelope.</param>
            <param name="charset">The charset.</param>
            <returns>The message properties.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Support.DefaultMessagePropertiesConverter.FromMessageProperties(RabbitMQ.Client.IModel,Spring.Messaging.Amqp.Core.MessageProperties,System.String)">
            <summary>
            Converts from message properties to basic properties.
            </summary>
            <param name="channel">The channel.</param>
            <param name="source">The source.</param>
            <param name="charset">The charset.</param>
            <returns>The basic properties.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Support.DefaultMessagePropertiesConverter.ConvertHeadersIfNecessary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts the headers if necessary.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The converted headers.</returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Support.DefaultMessagePropertiesConverter.ConvertHeaderValueIfNecessary(System.Object)">
            <summary>
            Converts the header value if necessary.
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Spring.Threading.AtomicTypes.AtomicBoolean">
            <summary>
            A <see cref="T:System.Boolean"/> value that may be updated atomically. An <see cref="T:Spring.Threading.AtomicTypes.AtomicBoolean"/> 
            is used for instances of atomically updated flags, and cannot be used as a replacement for a <see cref="T:System.Boolean"/> value.
            <p/>
            Based on the on the back port of JCP JSR-166.
            </summary>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Andreas Doehring (.NET)</author>
            <author>Kenneth Xu (Interlocked)</author>
        </member>
        <member name="T:Spring.Threading.AtomicTypes.IAtomic`1">
            <summary>
            Provide atomic access to an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the instance to be updated atomically.</typeparam>
            <author>Kenneth Xu</author>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.IAtomic`1.LazySet(`0)">
            <summary> 
            Eventually sets to the given value.
            </summary>
            <param name="newValue">
            the new value
            </param>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.IAtomic`1.CompareAndSet(`0,`0)">
            <summary> 
            Atomically sets the value to the <paramref name="newValue"/>
            if the current value equals the <paramref name="expectedValue"/>.
            </summary>
            <param name="expectedValue">
            The expected value
            </param>
            <param name="newValue">
            The new value to use of the current value equals the expected value.
            </param>
            <returns> 
            <c>true</c> if the current value equaled the expected value, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.IAtomic`1.WeakCompareAndSet(`0,`0)">
            <summary> 
            Atomically sets the value to the <paramref name="newValue"/>
            if the current value equals the <paramref name="expectedValue"/>.
            May fail spuriously.
            </summary>
            <param name="expectedValue">
            The expected value
            </param>
            <param name="newValue">
            The new value to use of the current value equals the expected value.
            </param>
            <returns>
            <c>true</c> if the current value equaled the expected value, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.IAtomic`1.Exchange(`0)">
            <summary> 
            Atomically sets to the given value and returns the previous value.
            </summary>
            <param name="newValue">
            The new value for the instance.
            </param>
            <returns> 
            the previous value of the instance.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.IAtomic`1.ToString">
            <summary> 
            Returns the String representation of the current value.
            </summary>
            <returns> 
            The String representation of the current value.
            </returns>
        </member>
        <member name="P:Spring.Threading.AtomicTypes.IAtomic`1.Value">
            <summary> 
            Gets and sets the current value.
            </summary>
        </member>
        <member name="F:Spring.Threading.AtomicTypes.AtomicBoolean._booleanValue">
            <summary>
            Holds a <see cref="T:System.Int32"/> representation of the flag value.
            </summary>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicBoolean.#ctor(System.Boolean)">
            <summary> 
            Creates a new <see cref="T:Spring.Threading.AtomicTypes.AtomicBoolean"/> with the given initial value.
            </summary>
            <param name="initialValue">
            The initial value
            </param>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicBoolean.#ctor">
            <summary> 
            Creates a new <see cref="T:Spring.Threading.AtomicTypes.AtomicBoolean"/> with initial value of <c>false</c>.
            </summary>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicBoolean.CompareAndSet(System.Boolean,System.Boolean)">
            <summary> 
            Atomically sets the value to <paramref name="newValue"/>
            if the current value == <paramref name="expectedValue"/>
            </summary>
            <param name="expectedValue">
            The expected value
            </param>
            <param name="newValue">
            The new value to use of the current value equals the expected value.
            </param>
            <returns> 
            <c>true</c> if the current value equaled the expected value, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicBoolean.WeakCompareAndSet(System.Boolean,System.Boolean)">
            <summary> 
            Atomically sets the value to <paramref name="newValue"/>
            if the current value == <paramref name="expectedValue"/>
            May fail spuriously.
            </summary>
            <param name="expectedValue">
            The expected value
            </param>
            <param name="newValue">
            The new value to use of the current value equals the expected value.
            </param>
            <returns>
            <c>true</c> if the current value equaled the expected value, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicBoolean.LazySet(System.Boolean)">
            <summary> 
            Eventually sets to the given value.
            </summary>
            <param name="newValue">
            the new value
            </param>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicBoolean.Exchange(System.Boolean)">
            <summary> 
            Atomically sets the current value to <parmref name="newValue"/> and returns the previous value.
            </summary>
            <param name="newValue">
            The new value for the instance.
            </param>
            <returns> 
            the previous value of the instance.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicBoolean.ToString">
            <summary> 
            Returns the String representation of the current value.
            </summary>
            <returns> 
            The String representation of the current value.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicBoolean.op_Implicit(Spring.Threading.AtomicTypes.AtomicBoolean)~System.Boolean">
            <summary>
            Implicit convert <see cref="T:Spring.Threading.AtomicTypes.AtomicBoolean"/> to bool.
            </summary>
            <param name="atomicBoolean">
            Instance of <see cref="T:Spring.Threading.AtomicTypes.AtomicBoolean"/>
            </param>
            <returns>
            The boolean value of <paramref name="atomicBoolean"/>.
            </returns>
        </member>
        <member name="P:Spring.Threading.AtomicTypes.AtomicBoolean.Value">
            <summary> 
            Gets and sets the current value.
            </summary>
        </member>
        <member name="T:Spring.Threading.AtomicTypes.AtomicInteger">
            <summary> 
            An <see cref="T:System.Int32"/> value that may be updated atomically.
            An <see cref="T:Spring.Threading.AtomicTypes.AtomicInteger"/> is used in applications such as atomically
            incremented counters, and cannot be used as a replacement for an
            <see cref="T:System.Int32"/>. 
            <p/>
            Based on the on the back port of JCP JSR-166.
            </summary>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Andreas Doehring (.NET)</author>
            <author>Kenneth Xu (Interlocked)</author>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.#ctor(System.Int32)">
            <summary> 
            Creates a new <see cref="T:Spring.Threading.AtomicTypes.AtomicInteger"/> with a value of <paramref name="initialValue"/>.
            </summary>
            <param name="initialValue">
            The initial value
            </param>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.#ctor">
            <summary> 
            Creates a new <see cref="T:Spring.Threading.AtomicTypes.AtomicInteger"/> with initial value 0.
            </summary>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.ReturnValueAndIncrement">
            <summary> 
            Atomically increments by one the current value.
            </summary>
            <returns> 
            The previous value
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.ReturnValueAndDecrement">
            <summary> 
            Atomically decrements by one the current value.
            </summary>
            <returns> 
            The previous value
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.LazySet(System.Int32)">
            <summary> 
            Eventually sets to the given value.
            </summary>
            <param name="newValue">
            The new value
            </param>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.Exchange(System.Int32)">
            <summary> 
            Atomically sets value to <paramref name="newValue"/> and returns the old value.
            </summary>
            <param name="newValue">
            The new value
            </param>
            <returns> 
            The previous value
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.CompareAndSet(System.Int32,System.Int32)">
            <summary> 
            Atomically sets the value to <paramref name="newValue"/>
            if the current value == <paramref name="expectedValue"/>
            </summary>
            <param name="expectedValue">
            The expected value
            </param>
            <param name="newValue">
            The new value
            </param>
            <returns> <c>true</c> if successful. <c>false</c> return indicates that
            the actual value was not equal to the expected value.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.WeakCompareAndSet(System.Int32,System.Int32)">
            <summary> 
            Atomically sets the value to <paramref name="newValue"/>
            if the current value == <paramref name="expectedValue"/>
            </summary>
            <param name="expectedValue">
            The expected value
            </param>
            <param name="newValue">
            The new value
            </param>
            <returns> <c>true</c> if successful. <c>false</c> return indicates that
            the actual value was not equal to the expected value.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.AddDeltaAndReturnPreviousValue(System.Int32)">
            <summary> 
            Atomically adds <paramref name="deltaValue"/> to the current value.
            </summary>
            <param name="deltaValue">
            The value to add
            </param>
            <returns> 
            The previous value
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.AddDeltaAndReturnNewValue(System.Int32)">
            <summary> 
            Atomically adds <paramref name="deltaValue"/> to the current value.
            </summary>
            <param name="deltaValue">
            The value to add
            </param>
            <returns> 
            The updated value
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.IncrementValueAndReturn">
            <summary> 
            Atomically increments the current value by one.
            </summary>
            <returns> 
            The updated value
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.DecrementValueAndReturn">
            <summary> 
            Atomically decrements by one the current value.
            </summary>
            <returns> 
            The updated value
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.ToString">
            <summary> 
            Returns the String representation of the current value.
            </summary>
            <returns> 
            The String representation of the current value.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicInteger.op_Implicit(Spring.Threading.AtomicTypes.AtomicInteger)~System.Int32">
            <summary>
            Implicit converts <see cref="T:Spring.Threading.AtomicTypes.AtomicInteger"/> to int.
            </summary>
            <param name="atomicInteger">
            Instance of <see cref="T:Spring.Threading.AtomicTypes.AtomicInteger"/>.
            </param>
            <returns>
            The converted int value of <paramref name="atomicInteger"/>.
            </returns>
        </member>
        <member name="P:Spring.Threading.AtomicTypes.AtomicInteger.Value">
            <summary> 
            Gets and sets the current value.
            </summary>
            <returns>
            The current value
            </returns>
        </member>
        <member name="T:Spring.Threading.AtomicTypes.AtomicReference`1">
            <summary>
            A object reference that may be updated atomically with the equality
            defined as reference equals.
            <p/>
            Based on the on the back port of JCP JSR-166.
            </summary>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Andreas Doehring (.NET)</author>
            <author>Kenneth Xu (Interlocked)</author>
        </member>
        <member name="F:Spring.Threading.AtomicTypes.AtomicReference`1._reference">
            <summary>
            Holds the object reference.
            </summary>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicReference`1.#ctor(`0)">
            <summary> 
            Creates a new <see cref="T:Spring.Threading.AtomicTypes.AtomicReference`1"/> with the given initial value.
            </summary>
            <param name="initialValue">
            The initial value
            </param>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicReference`1.#ctor">
            <summary> 
            Creates a new <see cref="!:Atomic&lt;T&gt;"/> with <c>default<typeparamref name="T"/></c> 
            as initial value.
            </summary>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicReference`1.LazySet(`0)">
            <summary> 
            Eventually sets to the given value.
            </summary>
            <param name="newValue">
            the new value
            </param>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicReference`1.CompareAndSet(`0,`0)">
            <summary> 
            Atomically sets the value to the <paramref name="newValue"/>
            if the current value equals the <paramref name="expectedValue"/>.
            </summary>
            <param name="expectedValue">
            The expected value
            </param>
            <param name="newValue">
            The new value to use of the current value equals the expected value.
            </param>
            <returns> 
            <c>true</c> if the current value equaled the expected value, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicReference`1.WeakCompareAndSet(`0,`0)">
            <summary> 
            Atomically sets the value to the <paramref name="newValue"/>
            if the current value equals the <paramref name="expectedValue"/>.
            May fail spuriously.
            </summary>
            <param name="expectedValue">
            The expected value
            </param>
            <param name="newValue">
            The new value to use of the current value equals the expected value.
            </param>
            <returns>
            <c>true</c> if the current value equaled the expected value, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicReference`1.Exchange(`0)">
            <summary> 
            Atomically sets to the given value and returns the previous value.
            </summary>
            <param name="newValue">
            The new value for the instance.
            </param>
            <returns> 
            the previous value of the instance.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicReference`1.ToString">
            <summary> 
            Returns the String representation of the current value.
            </summary>
            <returns> 
            The String representation of the current value.
            </returns>
        </member>
        <member name="M:Spring.Threading.AtomicTypes.AtomicReference`1.op_Implicit(Spring.Threading.AtomicTypes.AtomicReference{`0})~`0">
            <summary>
            Implicit converts <see cref="T:Spring.Threading.AtomicTypes.AtomicReference`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="atomicReference">
            Instance of <see cref="T:Spring.Threading.AtomicTypes.AtomicReference`1"/>.
            </param>
            <returns>
            The converted int value of <paramref name="atomicReference"/>.
            </returns>
        </member>
        <member name="P:Spring.Threading.AtomicTypes.AtomicReference`1.Value">
            <summary> 
            Gets and sets the current value.
            </summary>
        </member>
        <member name="T:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1">
            <summary> 
            This class provides skeletal implementations of some
            <see cref="T:Spring.Threading.Collections.Generic.IBlockingQueue`1"/> operations.
            </summary>
            <author>Kenneth Xu</author>
        </member>
        <member name="T:Spring.Collections.Generic.AbstractQueue`1">
            <summary> 
            This class provides skeletal implementations for some of <see cref="T:Spring.Collections.Generic.IQueue`1"/>
            operations.
            </summary>
            <remarks>
            <para>
            The methods <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Add(`0)"/>, <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Remove"/>, and
            <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Element"/> are based on the <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Offer(`0)"/>,
            <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Poll(`0@)"/>, and <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Peek(`0@)"/> methods respectively but 
            throw exceptions instead of indicating failure via
            <see langword="false"/> returns.
            </para>
            </remarks>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Kenneth Xu</author>
        </member>
        <member name="T:Spring.Collections.Generic.AbstractCollection`1">
            <summary>
            Serve as based class to be inherited by the classes that needs to
            implement both the <see cref="T:System.Collections.ICollection"/> and 
            the <see cref="T:System.Collections.Generic.ICollection`1"/> interfaces.
            </summary>
            <remarks>
            <para>
            By inheriting from this abstract class, subclass is only required
            to implement the <see cref="M:Spring.Collections.Generic.AbstractCollection`1.GetEnumerator"/> to complete a concrete
            read only collection class.
            </para>
            <para>
            <see cref="T:Spring.Collections.Generic.AbstractCollection`1"/> throws <see cref="T:System.NotSupportedException"/> 
            for all access to the collection mutating members. 
            </para>
            </remarks>
            <typeparam name="T">Element type of the collection</typeparam>
            <author>Kenneth Xu</author>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>. This implementation
            always throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. This implementation 
            always throw this exception.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>. This implementation
            always throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. This implementation always 
            throw exception.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific 
            value. This implementation searchs the element by iterating through the 
            enumerator returned by <see cref="M:Spring.Collections.Generic.AbstractCollection`1.GetEnumerator"/> method.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.ToArray">
            <summary> 
            Returns an array containing all of the elements in this collection,
            in proper sequence.
            </summary>
            <remarks> 
            <para>
            The returned array will be "safe" in that no references to it are
            maintained by this collection.  (In other words, this method must
            allocate a new array).  The caller is thus free to modify the
            returned array.
            </para>
            <para>
            This method acts as bridge between array-based and collection-based
            APIs.
            </para>
            </remarks>
            <returns>
            An array containing all of the elements in this collection.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.ToArray(`0[])">
            <summary>
            Returns an array containing all of the elements in this collection, 
            in proper sequence; the runtime type of the returned array is that 
            of the specified array.  If the collection fits in the specified
            array, it is returned therein.  Otherwise, a new array is allocated
            with the runtime type of the specified array and the size of this 
            collection.
            </summary>	 
            <remarks>
            <para>
            Like the <see cref="M:Spring.Collections.Generic.AbstractCollection`1.ToArray"/> method, this method acts as bridge
            between array-based and collection-based APIs.  Further, this
            method allows precise control over the runtime type of the output
            array, and may, under certain circumstances, be used to save
            allocation costs.
            </para>
            <para>
            Suppose <i>x</i> is a collection known to contain only strings.
            The following code can be used to dump the collection into a newly
            allocated array of <see cref="T:System.String"/>s:
            
            <code language="c#">
            	string[] y = (string[]) x.ToArray(new string[0]);
            </code>
            </para>
            <para>
            Note that <i>ToArray(new T[0])</i> is identical in function to
            <see cref="M:Spring.Collections.Generic.AbstractCollection`1.ToArray"/>.
            </para>
            </remarks>
            <param name="targetArray">
            The array into which the elements of the colleciton are to be
            stored, if it is big enough; otherwise, a new array of the same 
            runtime type is allocated for this purpose.
            </param>
            <returns>
            An array containing all of the elements in this collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="targetArray"/> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
            If type of <paramref name="targetArray"/> is a derived type of
            <typeparamref name="T"/> and the collection contains element that
            is not that derived type.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an 
            <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> 
            index.
            </summary>
            <remarks>
            This method is intentionally sealed. Subclass should override
            <see cref="M:Spring.Collections.Generic.AbstractCollection`1.DoCopyTo(`0[],System.Int32,System.Boolean)"/> instead.
            </remarks>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the 
            destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. 
            The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            arrayIndex is less than 0.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            array is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            array is multidimensional.<br/>-or-<br/>
            arrayIndex is equal to or greater than the length of array. <br/>-or-<br/>
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> 
            is greater than the available space from arrayIndex to the end of 
            the destination array. <br/>-or-<br/>
            Type T cannot be cast automatically to the type of the destination array.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.DoCopyTo(`0[],System.Int32,System.Boolean)">
            <summary>
            Does the actual work of copying to array. Subclass is recommended to 
            override this method instead of <see cref="M:Spring.Collections.Generic.AbstractCollection`1.CopyTo(`0[],System.Int32)"/> method, which 
            does all neccessary parameter checking and raises proper exception
            before calling this method.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the 
            destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. 
            The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <param name="ensureCapacity">
            If is <c>true</c>, calls <see cref="M:Spring.Collections.Generic.AbstractCollection`1.EnsureCapacity(`0[],System.Int32)"/>
            </param>
            <returns>
            A new array of same runtime type as <paramref name="array"/> if 
            <paramref name="array"/> is too small to hold all elements and 
            <paramref name="ensureCapacity"/> is <c>false</c>. Otherwise
            the <paramref name="array"/> instance itself.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.EnsureCapacity(`0[],System.Int32)">
            <summary>
            Ensures the returned array has capacity specified by <paramref name="length"/>.
            </summary>
            <remarks>
            If <typeparamref name="T"/> is <see cref="T:System.Object"/> but array is 
            actaully <c>string[]</c>, the returned array is always <c>string[]</c>.
            </remarks>
            <param name="array">
            The source array.
            </param>
            <param name="length">
            Expected length of array.
            </param>
            <returns>
            <paramref name="array"/> itself if <c>array.Length &gt;= length</c>. 
            Otherwise a new array of same type of <paramref name="array"/> of given
            <paramref name="length"/>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            This implementation always throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; 
            otherwise, false. This method also returns false if item is not found in the 
            original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            When the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. This implementation always 
            throw this exception.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <remarks>
            Subclass must implement this method.
            </remarks>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate 
            through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> 
             object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> 
             to an <see cref="T:System.Array"></see>, starting at a particular 
             <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> 
             that is the destination of the elements copied from 
             <see cref="T:System.Collections.ICollection"></see>. The 
             <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
             array is multidimensional.-or- index is equal to or greater than 
             the length of array.-or- The number of elements in the source 
             <see cref="T:System.Collections.ICollection"></see> is greater 
             than the available space from index to the end of the destination 
             array. </exception>
            <exception cref="T:System.InvalidCastException">
             The type of the source <see cref="T:System.Collections.ICollection"></see> 
             cannot be cast automatically to the type of the destination array. </exception>
             <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <remarks>
            This implmentation list out all the elements separated by comma.
            </remarks>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.CopyTo(System.Array,System.Int32)">
             <summary>
             Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an 
             <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> 
             index.
             </summary>
            
             <param name="array">
             The one-dimensional <see cref="T:System.Array"/> that is the destination 
             of the elements copied from <see cref="T:System.Collections.ICollection"/>. The 
             <see cref="T:System.Array"/> must have zero-based indexing. 
             </param>
             <param name="index">
             The zero-based index in array at which copying begins. 
             </param>
             <exception cref="T:System.ArgumentNullException">array is null. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             index is less than zero. 
             </exception>
             <exception cref="T:System.ArgumentException">
             array is multidimensional.-or- index is equal to or greater than 
             the length of array.
             -or- 
             The number of elements in the source <see cref="T:System.Collections.ICollection"/> 
             is greater than the available space from index to the end of the 
             destination array. 
             </exception>
             <exception cref="T:System.InvalidCastException">
             The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast 
             automatically to the type of the destination array. 
             </exception>
             <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary> 
            Adds all of the elements in the supplied <paramref name="collection"/>
            to this collection.
            </summary>
            <remarks>
            <para>
            Attempts to <see cref="M:Spring.Collections.Generic.AbstractCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/> of a collection to 
            itself result in <see cref="T:System.ArgumentException"/>. Further, the 
            behavior of this operation is undefined if the specified
            collection is modified while the operation is in progress.
            </para>
            <para>
            This implementation iterates over the specified collection, and 
            adds each element returned by the iterator to this collection, in turn.
            An exception encountered while trying to add an element may result 
            in only some of the elements having been successfully added when 
            the associated exception is thrown.
            </para>
            </remarks>
            <param name="collection">
            The collection containing the elements to be added to this collection.
            </param>
            <returns>
            <c>true</c> if this collection is modified, else <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the collection is the current collection.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractCollection`1.DoAddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Called by <see cref="M:Spring.Collections.Generic.AbstractCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/> after the parameter is validated
            to be neither <c>null</c> nor this collection itself.
            </summary>
            <param name="collection">Collection of items to be added.</param>
            <returns>
            <c>true</c> if this collection is modified, else <c>false</c>.
            </returns>
        </member>
        <member name="P:Spring.Collections.Generic.AbstractCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            This implementation counts the elements by iterating through the 
            enumerator returned by <see cref="M:Spring.Collections.Generic.AbstractCollection`1.GetEnumerator"/> method.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            
        </member>
        <member name="P:Spring.Collections.Generic.AbstractCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            This implementation always return true;
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            This implementation always return true;
            </returns>
            
        </member>
        <member name="P:Spring.Collections.Generic.AbstractCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the 
             <see cref="T:System.Collections.ICollection"></see> 
             is synchronized (thread safe).
            </summary>
            
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> 
             is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Spring.Collections.Generic.AbstractCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the 
             <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            
            <returns>
            An object that can be used to synchronize access to the 
             <see cref="T:System.Collections.ICollection"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Spring.Collections.Generic.AbstractCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the 
            <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <remarks>This implementation returns <see langword="null"/>.</remarks>
            <returns>
            An object that can be used to synchronize access to the 
            <see cref="T:System.Collections.ICollection"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Spring.Collections.Generic.AbstractCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> 
            is synchronized (thread safe).
            </summary>
            <remarks>This implementaiton always return <see langword="false"/>.</remarks>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> 
            is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Spring.Collections.Generic.IQueue`1">
            <summary>
            A collection designed for holding elements prior to processing.
            </summary>
            <remarks>
            <para>
            Besides basic <see cref="T:System.Collections.Generic.ICollection`1"/> operations, queues provide 
            additional insertion, extraction, and inspection operations. 
            </para>
            <para>
            Each of these methods exists in two forms: one throws an exception if 
            the operation fails, the other returns a special value. The latter 
            form of the insert operation is designed specifically for use with 
            capacity-restricted <see cref="T:Spring.Collections.Generic.IQueue`1"/> implementations; in most 
            implementations, insert operations cannot fail. 
            </para>
            <para>
            Queues typically, but do not necessarily, order elements in a FIFO 
            (first-in-first-out) manner. Among the exceptions are priority queues, 
            which order elements according to a supplied comparator, or the 
            elements' natural ordering, and LIFO queues (or stacks) which order 
            the elements LIFO (last-in-first-out). Whatever the ordering used,
             the head of the queue is that element which would be removed by a call 
            to <see cref="M:Spring.Collections.Generic.IQueue`1.Remove"/> or <see cref="M:Spring.Collections.Generic.IQueue`1.Poll(`0@)"/>. In a FIFO queue, all new 
            elements are inserted at the tail of the queue. Other kinds of queues 
            may use different placement rules. Every <see cref="T:Spring.Collections.Generic.IQueue`1"/> 
            implementation must specify its ordering properties. 
            </para>
            <para>
            The <see cref="M:Spring.Collections.Generic.IQueue`1.Offer(`0)"/> method inserts an element if possible, 
            otherwise returning <c>false</c>. This differs from the 
            <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> method, which can fail to add an 
            element only by throwing an exception. The <see cref="M:Spring.Collections.Generic.IQueue`1.Offer(`0)"/> method 
            is designed for use when failure is a normal, rather than exceptional 
            occurrence, for example, in fixed-capacity (or "bounded") queues. 
            </para>
            <para>
            The <see cref="M:Spring.Collections.Generic.IQueue`1.Remove"/> and <see cref="M:Spring.Collections.Generic.IQueue`1.Poll(`0@)"/> methods remove and 
            return the head of the queue. Exactly which element is removed from 
            the queue is a function of the queue's ordering policy, which differs 
            from implementation to implementation. The <see cref="M:Spring.Collections.Generic.IQueue`1.Remove"/> and Poll
            <see cref="M:Spring.Collections.Generic.IQueue`1.Poll(`0@)"/> methods differ only in their behavior when the queue 
            is empty: the <see cref="M:Spring.Collections.Generic.IQueue`1.Remove"/> method throws an exception, while 
            the <see cref="M:Spring.Collections.Generic.IQueue`1.Poll(`0@)"/> method returns <c>false</c>. 
            </para>
            <para>
            The <see cref="M:Spring.Collections.Generic.IQueue`1.Element"/> and <see cref="M:Spring.Collections.Generic.IQueue`1.Peek(`0@)"/> methods return, but do 
            not remove, the head of the queue. 
            </para>
            <para>
            The <see cref="T:Spring.Collections.Generic.IQueue`1"/> interface does not define the blocking queue 
            methods, which are common in concurrent programming. 
            </para>
            <para>
            <see cref="T:Spring.Collections.Generic.IQueue`1"/> implementations generally do not define 
            element-based versions of methods <see cref="M:System.Object.Equals(System.Object)"/> 
            and  <see cref="M:System.Object.GetHashCode"/>, but instead inherit the identity 
            based versions from the class object, because element-based equality is 
            not always well-defined for queues with the same elements but different 
            ordering properties. 
            </para>
            <para>
            Based on the back port of JCP JSR-166.
            </para>
            </remarks>
            <typeparam name="T">The type of the elements in the queue.</typeparam>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Kenneth Xu</author>
        </member>
        <member name="M:Spring.Collections.Generic.IQueue`1.Element">
            <summary>
            Retrieves, but does not remove, the head of this queue. 
            </summary>
            <remarks>
            This method differs from <see cref="M:Spring.Collections.Generic.IQueue`1.Peek(`0@)"/> in that it throws an 
            exception if this queue is empty. 
            </remarks>
            <returns>The head of this queue.</returns>
            <exception cref="T:System.InvalidOperationException">
            If this queue is empty.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.IQueue`1.Offer(`0)">
            <summary>
            Inserts the specified element into this queue if it is possible to 
            do so immediately without violating capacity restrictions. 
            </summary>
            <remarks>
            When using a capacity-restricted queue, this method is generally 
            preferable to <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>, which can fail to 
            insert an element only by throwing an exception. 
            </remarks>
            <param name="element">The element to add.</param>
            <returns>
            <c>true</c> if the element was added to this queue. Otherwise 
            <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="element"/> is <c>null</c> and the queue 
            implementation doesn't allow <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="element"/> 
            prevents it from being added to this queue. 
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.IQueue`1.Peek(`0@)">
            <summary>
            Retrieves, but does not remove, the head of this queue into out
            parameter <paramref name="element"/>.
            </summary>
            <param name="element">
            The head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <returns>
            <c>false</c> is the queue is empty. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.IQueue`1.Poll(`0@)">
            <summary>
            Retrieves and removes the head of this queue into out parameter
            <paramref name="element"/>. 
            </summary>
            <param name="element">
            Set to the head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <returns>
            <c>false</c> if the queue is empty. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.IQueue`1.Remove">
            <summary>
            Retrieves and removes the head of this queue. 
            </summary>
            <returns>The head of this queue</returns>
            <exception cref="T:System.InvalidOperationException">
            If this queue is empty.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})">
            <summary> 
            Removes all available elements from this queue and invoke the given
            <paramref name="action"/> on each element in order.
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to invoke the 
            <paramref name="action"/> on the elements may result in elements 
            being neither, either or both in the queue or processed when the 
            associated exception is thrown.
            <example> Drain to a non-generic list.
            <code language="c#">
            IList c = ...;
            int count = Drain(delegate(T e) {c.Add(e);});
            </code>
            </example>
            </remarks>
            <param name="action">The action to performe on each element.</param>
            <returns>The number of elements processed.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified action is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0})"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32)"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Predicate{`0})">
            <summary> 
            Removes all available elements that meet the criteria defined by 
            <paramref name="criteria"/> from this queue and invoke the given
            <paramref name="action"/> on each element in order.
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to invoke the 
            <paramref name="action"/> on the elements may result in elements 
            being neither, either or both in the queue or processed when the 
            associated exception is thrown.
            <example> Drain to a non-generic list.
            <code language="c#">
            IList c = ...;
            int count = Drain(delegate(T e) {c.Add(e);});
            </code>
            </example>
            </remarks>
            <param name="action">The action to performe on each element.</param>
            <param name="criteria">The criteria to filter the elements.</param>
            <returns>The number of elements processed.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified action is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)">
            <summary> 
            Removes at most the given number of available elements from this 
            queue and invoke the given <paramref name="action"/> on each 
            element in order.
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to invoke the 
            <paramref name="action"/> on the elements may result in elements 
            being neither, either or both in the queue or processed when the 
            associated exception is thrown.
            </remarks>
            <param name="action">The action to performe on each element.</param>
            <param name="maxElements">the maximum number of elements to transfer</param>
            <returns>The number of elements processed.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified action is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
        </member>
        <member name="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32,System.Predicate{`0})">
            <summary> 
            Removes at most the given number of available elements that meet 
            the criteria defined by <paramref name="criteria"/> from this 
            queue and invoke the given <paramref name="action"/> on each 
            element in order.
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to invoke the 
            <paramref name="action"/> on the elements may result in elements 
            being neither, either or both in the queue or processed when the 
            associated exception is thrown.
            </remarks>
            <param name="action">The action to performe on each element.</param>
            <param name="maxElements">the maximum number of elements to transfer</param>
            <param name="criteria">The criteria to filter the elements.</param>
            <returns>The number of elements processed.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified action is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
        </member>
        <member name="P:Spring.Collections.Generic.IQueue`1.RemainingCapacity">
            <summary>
            Gets the remaining capacity of a bounded queue or
            <see cref="F:System.Int32.MaxValue"/> if the queue is un-bounded.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Offer(`0)">
            <summary>
            Inserts the specified element into this queue if it is possible to 
            do so immediately without violating capacity restrictions. 
            </summary>
            <remarks>
            When using a capacity-restricted queue, this method is generally 
            preferable to <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Add(`0)"/>, which can fail to 
            insert an element only by throwing an exception. 
            </remarks>
            <param name="element">The element to add.</param>
            <returns>
            <c>true</c> if the element was added to this queue. Otherwise 
            <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="element"/> is <c>null</c> and the queue 
            implementation doesn't allow <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="element"/> 
            prevents it from being added to this queue. 
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Element">
            <summary>
            Retrieves, but does not remove, the head of this queue. 
            </summary>
            <remarks>
            <para>
            This method differs from <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Peek(`0@)"/> in that it throws an 
            exception if this queue is empty. 
            </para>
            <para>
            this implementation returns the result of <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Peek(`0@)"/> 
            unless the queue is empty.
            </para>
            </remarks>
            <returns>The head of this queue.</returns>
            <exception cref="T:System.InvalidOperationException">
            If this queue is empty.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Peek(`0@)">
            <summary>
            Retrieves, but does not remove, the head of this queue into out
            parameter <paramref name="element"/>.
            </summary>
            <param name="element">
            The head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <returns>
            <c>false</c> is the queue is empty. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Remove">
            <summary>
            Retrieves and removes the head of this queue. 
            </summary>
            <returns>The head of this queue</returns>
            <exception cref="T:System.InvalidOperationException">
            If this queue is empty.
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Poll(`0@)">
            <summary>
            Retrieves and removes the head of this queue into out parameter
            <paramref name="element"/>. 
            </summary>
            <param name="element">
            Set to the head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <returns>
            <c>false</c> if the queue is empty. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Add(`0)">
            <summary>
            Inserts the specified <paramref name="element"/> into this queue 
            if it is possible to do so immediately without violating capacity 
            restrictions. Throws an <see cref="T:System.InvalidOperationException"/> 
            if no space is currently available.
            </summary>
            <param name="element">The element to add.</param>
            <exception cref="T:System.InvalidOperationException">
            If the <paramref name="element"/> cannot be added at this time due 
            to capacity restrictions. 
            </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Clear">
            <summary>
            Removes all items from the queue.
            </summary>
            <remarks>
            This implementation repeatedly calls the <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Poll(`0@)"/> moethod
            until it returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Spring#Collections#IQueue#Add(System.Object)">
            <summary>
            Add differ from <see cref="M:Spring.Collections.IQueue.Offer(System.Object)"/> by throwing exception
            When queue is full.
            </summary>
            <param name="objectToAdd"></param>
            <returns>
            TODO: The should be changed to void! in java Queue inherits 
            from Collection, which has abstract method <c>boolean Add(object)</c>, 
            in .Net, there is no such limitation!
            </returns>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Spring#Collections#IQueue#Remove">
            <summary>
            Remove differ from <see cref="M:Spring.Collections.IQueue.Poll"/> by throwing exception
            When queue is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0})">
            <summary> 
            Removes all available elements from this queue and invoke the given
            <paramref name="action"/> on each element in order.
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to invoke the 
            <paramref name="action"/> on the elements may result in elements 
            being neither, either or both in the queue or processed when the 
            associated exception is thrown.
            <example> Drain to a non-generic list.
            <code language="c#">
            IList c = ...;
            int count = Drain(delegate(T e) {c.Add(e);});
            </code>
            </example>
            </remarks>
            <param name="action">The action to performe on each element.</param>
            <returns>The number of elements processed.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified action is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0},System.Predicate{`0})">
            <summary> 
            Removes all elements that pass the given <paramref name="criteria"/> 
            from this queue and invoke the given <paramref name="action"/> on 
            each element in order.
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to invoke the 
            <paramref name="action"/> on the elements may result in elements 
            being neither, either or both in the queue or processed when the 
            associated exception is thrown.
            <example> Drain to a non-generic list.
            <code language="c#">
            IList c = ...;
            int count = Drain(delegate(T e) {c.Add(e);});
            </code>
            </example>
            </remarks>
            <param name="action">The action to performe on each element.</param>
            <param name="criteria">
            The criteria to select the elements. <c>null</c> selects any element.
            </param>
            <returns>The number of elements processed.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified action is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0},System.Int32)">
            <summary> 
            Removes at most the given number of available elements from this 
            queue and invoke the given <paramref name="action"/> on each 
            element in order.
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to invoke the 
            <paramref name="action"/> on the elements may result in elements 
            being neither, either or both in the queue or processed when the 
            associated exception is thrown.
            </remarks>
            <param name="action">The action to performe on each element.</param>
            <param name="maxElements">the maximum number of elements to transfer</param>
            <returns>The number of elements processed.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified action is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0},System.Int32,System.Predicate{`0})">
            <summary> 
            Removes at most the given number of elements that pass the given 
            <paramref name="criteria"/>from this queue and invoke the given 
            <paramref name="action"/> on each element in order.
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to invoke the 
            <paramref name="action"/> on the elements may result in elements 
            being neither, either or both in the queue or processed when the 
            associated exception is thrown.
            </remarks>
            <param name="action">The action to performe on each element.</param>
            <param name="maxElements">the maximum number of elements to transfer</param>
            <param name="criteria">
            The criteria to select the elements. <c>null</c> selects any element.
            </param>
            <returns>The number of elements processed.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified action is <see langword="null"/>.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.DoDrain(System.Action{`0},System.Int32,System.Predicate{`0})">
            <summary> 
            Does the real work for all drain methods. Caller must
            guarantee the <paramref name="action"/> is not <c>null</c> and
            <paramref name="maxElements"/> is greater then zero (0).
            </summary>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Predicate{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractQueue`1.DoDrain(System.Action{`0},System.Predicate{`0})">
            <summary>
            Does the real work for the <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0})"/>
            and <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0},System.Predicate{`0})"/>.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.AbstractQueue`1.RemainingCapacity">
            <summary>
            Returns the remaining capacity of this queue.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.AbstractQueue`1.IsEmpty">
            <summary>
            Returns <see langword="true"/> if there are no elements in the 
            <see cref="T:Spring.Collections.Generic.IQueue`1"/>, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.AbstractQueue`1.Capacity">
            <summary>
            Returns the current capacity of this queue.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.AbstractQueue`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            This implementation always return true;
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            This implementation always return false as typically a queue should not
            be read only.
            </returns>
            
        </member>
        <member name="T:Spring.Threading.Collections.Generic.IBlockingQueue`1">
            <summary> 
            A <see cref="T:Spring.Collections.Generic.IQueue`1"/> that additionally supports operations
            that wait for the queue to become non-empty when retrieving an
            element, and wait for space to become available in the queue when
            storing an element.
            </summary>
            <remarks>
            <para>
            <see cref="T:Spring.Threading.Collections.Generic.IBlockingQueue`1"/> methods come in four forms, with different ways
            of handling operations that cannot be satisfied immediately, but may be
            satisfied at some point in the future:
            <list type="bullet">
            <item>
            one throws an exception,
            </item>
            <item>
            the second returns a special value (either <c>default(T)</c> or 
            <see langword="false"/>, depending on the operation), 
            </item>
            <item>
            the third blocks the current thread indefinitely until the operation can succeed,
            and 
            </item>
            <item>
            the fourth blocks for only a given maximum time limit before giving
            up.
            </item>
            </list>
            </para>
            <para>
            A <see cref="T:Spring.Threading.Collections.Generic.IBlockingQueue`1"/> may be capacity bounded. At any given
            time it may have a <see cref="P:Spring.Collections.Generic.IQueue`1.RemainingCapacity"/> beyond which no
            additional elements can be <see cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.Put(`0)"/> without blocking.
            A <see cref="T:Spring.Threading.Collections.Generic.IBlockingQueue`1"/> without any intrinsic capacity constraints always
            reports a remaining capacity of <see cref="F:System.Int32.MaxValue"/>.
            </para>
            <para>
            <see cref="T:Spring.Threading.Collections.Generic.IBlockingQueue`1"/> implementations are designed to be used
            primarily for producer-consumer queues, but additionally support
            the <see cref="T:System.Collections.Generic.ICollection`1"/> interface.  So, for example, it is
            possible to remove an arbitrary element from a queue using
            <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>. 
            However, such operations are in general
            <b>not</b> performed very efficiently, and are intended for only
            occasional use, such as when a queued message is cancelled.
            </para>
            <para>
            A <see cref="T:Spring.Threading.Collections.Generic.IBlockingQueue`1"/> does <b>not</b> intrinsically support
            any kind of 'close' or 'shutdown' operation to
            indicate that no more items will be added.  The needs and usage of
            such features tend to be implementation-dependent. For example, a
            common tactic is for producers to insert special
            <b>end-of-stream</b> or <b>poison</b> objects, that are
            interpreted accordingly when taken by consumers.
            </para>
            <para>
            A <see cref="T:Spring.Threading.Collections.Generic.IBlockingQueue`1"/> can safely be used with multiple
            producers and multiple consumers.
            </para>
            <example>
            Usage example, based on a typical producer-consumer scenario. 
            TODO: Convert non-generic example below to using generic version
            <code>
            class Producer : IRunnable {
            	private IBlockingQueue queue;
            	Producer(IBlockingQueue q) { queue = q; }
            	public void Run() {
            		try {
            			while (true) { 
            				queue.Put(produce()); 
            			}
            		} catch (InterruptedException ex) { 
            			... handle ...
            		}
            	}
            	Object Produce() { ... }
            }
            
            class Consumer : IRunnable {
            	private IBlockingQueue queue;
            	Consumer(IBlockingQueue q) { queue = q; }
            	public void Run() {
            		try {
            			while (true) { Consume(queue.Take()); }
            		} catch (InterruptedException ex) { ... handle ...}
            	}
            	void Consume(object x) { ... }
            }
            
            class Setup {
            	void Main() {
            		IBlockingQueue q = new SomeQueueImplementation();
            		Producer p = new Producer(q);
            		Consumer c1 = new Consumer(q);
            		Consumer c2 = new Consumer(q);
            		new Thread(new ThreadStart(p.Run)).Start();
            		new Thread(new ThreadStart(c1.Run)).Start();
            		new Thread(new ThreadStart(c2.Run)).Start();
            	}
            }
            </code>
            </example>
            </remarks>
            <typeparam name="T">The type of the elements in the queue.</typeparam>
            <author>Doug Lea</author>
            <author>Griffin Caprio(.NET)</author>
            <author>Kenneth Xu</author>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.Put(`0)">
            <summary> 
            Inserts the specified element into this queue, waiting if necessary
            for space to become available.
            </summary>
            <param name="element">the element to add</param>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if interrupted while waiting.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="element"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.Offer(`0,System.TimeSpan)">
            <summary> 
            Inserts the specified element into this queue, waiting up to the
            specified wait time if necessary for space to become available.
            </summary>
            <param name="element">The element to add.</param>
            <param name="duration">How long to wait before giving up.</param>
            <returns>
            <see langword="true"/> if successful, or <see langword="false"/> if
            the specified waiting time elapses before space is available.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the specified element is <see langword="null"/> and this queue 
            does not permit <c>null</c> elements.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="element"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.Take">
            <summary> 
            Retrieves and removes the head of this queue, waiting if necessary
            until an element becomes available.
            </summary>
            <returns> the head of this queue</returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.Poll(System.TimeSpan,`0@)">
            <summary> 
            Retrieves and removes the head of this queue, waiting up to the
            specified wait time if necessary for an element to become available.
            </summary>
            <param name="element">
            Set to the head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <param name="duration">How long to wait before giving up.</param>
            <returns> 
            <c>false</c> if the queue is still empty after waited for the time 
            specified by the <paramref name="duration"/>. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0})">
            <summary> 
            Removes all available elements from this queue and adds them to the 
            given collection.  
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to add elements to 
            collection <paramref name="collection"/> may result in elements 
            being in neither, either or both collections when the associated 
            exception is thrown.  Attempts to drain a queue to itself result in
            <see cref="T:System.ArgumentException"/>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.
            </remarks>
            <param name="collection">the collection to transfer elements into</param>
            <returns> the number of elements transferred</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="collection"/> prevents it
            from being used for the elemetns from the queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified collection is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="collection"/> represents the queue itself.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32)"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Predicate{`0})">
            <summary> 
            Removes all available elements that meet the criteria defined by 
            <paramref name="predicate"/> from this queue and adds them to the 
            given collection.  
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to add elements to 
            collection <paramref name="collection"/> may result in elements 
            being in neither, either or both collections when the associated 
            exception is thrown.  Attempts to drain a queue to itself result in
            <see cref="T:System.ArgumentException"/>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.
            </remarks>
            <param name="collection">The collection to transfer elements into</param>
            <param name="predicate">The criteria to filter the elements</param>
            <returns> the number of elements transferred</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="collection"/> prevents it
            from being used for the elemetns from the queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified collection is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="collection"/> represents the queue itself.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32)"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary> 
            Removes at most the given number of available elements from
            this queue and adds them to the given collection.  
            </summary>
            <remarks> 
            This operation may be more
            efficient than repeatedly polling this queue.  A failure
            encountered while attempting to add elements to
            collection <paramref name="collection"/> may result in elements being in neither,
            either or both collections when the associated exception is
            thrown.  Attempts to drain a queue to itself result in
            <see cref="T:System.ArgumentException"/>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.
            </remarks>
            <param name="collection">the collection to transfer elements into</param>
            <param name="maxElements">the maximum number of elements to transfer</param>
            <returns> the number of elements transferred</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="collection"/> prevents it
            from being used for the elemetns from the queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified collection is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="collection"/> represents the queue itself.
            </exception>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32,System.Predicate{`0})">
            <summary> 
            Removes at most the given number of available elements that meet 
            the criteria defined by <paramref name="predicate"/> from this 
            queue and adds them to the given collection.  
            </summary>
            <remarks> 
            This operation may be more
            efficient than repeatedly polling this queue.  A failure
            encountered while attempting to add elements to
            collection <paramref name="collection"/> may result in elements being in neither,
            either or both collections when the associated exception is
            thrown.  Attempts to drain a queue to itself result in
            <see cref="T:System.ArgumentException"/>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.
            </remarks>
            <param name="collection">the collection to transfer elements into</param>
            <param name="maxElements">the maximum number of elements to transfer</param>
            <param name="predicate">The criteria to filter the elements.</param>
            <returns> the number of elements transferred</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="collection"/> prevents it
            from being used for the elemetns from the queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified collection is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="collection"/> represents the queue itself.
            </exception>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.Put(`0)">
            <summary> 
            Inserts the specified element into this queue, waiting if necessary
            for space to become available.
            </summary>
            <param name="element">the element to add</param>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if interrupted while waiting.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="element"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.Offer(`0,System.TimeSpan)">
            <summary> 
            Inserts the specified element into this queue, waiting up to the
            specified wait time if necessary for space to become available.
            </summary>
            <param name="element">The element to add.</param>
            <param name="duration">How long to wait before giving up.</param>
            <returns>
            <see langword="true"/> if successful, or <see langword="false"/> if
            the specified waiting time elapses before space is available.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if interrupted while waiting.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="element"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.Take">
            <summary> 
            Retrieves and removes the head of this queue, waiting if necessary
            until an element becomes available.
            </summary>
            <returns> the head of this queue</returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.Poll(System.TimeSpan,`0@)">
            <summary> 
            Retrieves and removes the head of this queue, waiting up to the
            specified wait time if necessary for an element to become available.
            </summary>
            <param name="element">
            Set to the head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <param name="duration">How long to wait before giving up.</param>
            <returns> 
            <c>false</c> if the queue is still empty after waited for the time 
            specified by the <paramref name="duration"/>. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0})">
            <summary> 
            Removes all available elements from this queue and adds them to the 
            given collection.  
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to add elements to 
            collection <paramref name="collection"/> may result in elements 
            being in neither, either or both collections when the associated 
            exception is thrown.  Attempts to drain a queue to itself result in
            <see cref="T:System.ArgumentException"/>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.
            </remarks>
            <param name="collection">the collection to transfer elements into</param>
            <returns> the number of elements transferred</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="collection"/> prevents it
            from being used for the elemetns from the queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified collection is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="collection"/> represents the queue itself.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32)"/>
            <seealso cref="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Predicate{`0})">
            <summary> 
            Removes all available elements that meet the criteria defined by 
            <paramref name="predicate"/> from this queue and adds them to the 
            given collection.  
            </summary>
            <remarks>
            This operation may be more efficient than repeatedly polling this 
            queue.  A failure encountered while attempting to add elements to 
            collection <paramref name="collection"/> may result in elements 
            being in neither, either or both collections when the associated 
            exception is thrown.  Attempts to drain a queue to itself result in
            <see cref="T:System.ArgumentException"/>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.
            </remarks>
            <param name="collection">The collection to transfer elements into</param>
            <param name="predicate">The criteria to filter the elements</param>
            <returns> the number of elements transferred</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="collection"/> prevents it
            from being used for the elemetns from the queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified collection is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="collection"/> represents the queue itself.
            </exception>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32)"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary> 
            Removes at most the given number of available elements from
            this queue and adds them to the given collection.  
            </summary>
            <remarks> 
            This operation may be more
            efficient than repeatedly polling this queue.  A failure
            encountered while attempting to add elements to
            collection <paramref name="collection"/> may result in elements being in neither,
            either or both collections when the associated exception is
            thrown.  Attempts to drain a queue to itself result in
            <see cref="T:System.ArgumentException"/>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.
            </remarks>
            <param name="collection">the collection to transfer elements into</param>
            <param name="maxElements">the maximum number of elements to transfer</param>
            <returns> the number of elements transferred</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="collection"/> prevents it
            from being used for the elemetns from the queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified collection is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="collection"/> represents the queue itself.
            </exception>
            <seealso cref="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32,System.Predicate{`0})">
            <summary> 
            Removes at most the given number of available elements that meet 
            the criteria defined by <paramref name="predicate"/> from this 
            queue and adds them to the given collection.  
            </summary>
            <remarks> 
            This operation may be more
            efficient than repeatedly polling this queue.  A failure
            encountered while attempting to add elements to
            collection <paramref name="collection"/> may result in elements being in neither,
            either or both collections when the associated exception is
            thrown.  Attempts to drain a queue to itself result in
            <see cref="T:System.ArgumentException"/>. Further, the behavior of
            this operation is undefined if the specified collection is
            modified while the operation is in progress.
            </remarks>
            <param name="collection">the collection to transfer elements into</param>
            <param name="maxElements">the maximum number of elements to transfer</param>
            <param name="predicate">The criteria to filter the elements.</param>
            <returns> the number of elements transferred</returns>
            <exception cref="T:System.InvalidOperationException">
            If the queue cannot be drained at this time.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="collection"/> prevents it
            from being used for the elemetns from the queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified collection is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="collection"/> represents the queue itself.
            </exception>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
        </member>
        <member name="P:Spring.Threading.Collections.Generic.AbstractBlockingQueue`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> 
            is synchronized (thread safe).
            </summary>
            <remarks>This implementaiton always return <see langword="true"/>.</remarks>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> 
            is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Spring.Collections.Generic.AbstractEnumerator`1">
            <summary>
            Serve as base class to be inherited by the classes that needs to
            implement both the <see cref="T:System.Collections.IEnumerator"/> and 
            the <see cref="T:System.Collections.Generic.IEnumerator`1"/> interfaces.
            </summary>
            <typeparam name="T">Type of the elements to be iterated.</typeparam>
            <author>Kenneth Xu</author>
        </member>
        <member name="F:Spring.Collections.Generic.AbstractEnumerator`1._state">
            <summary>
            Indicates if the enumerator has not startet, is in progress, 
            or has already finished.
            </summary>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractEnumerator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> 
             that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractEnumerator`1.GoNext">
             <summary>
             Advances the enumerator to the next element of the collection.
             </summary>
            
             <returns>
             true if the enumerator was successfully advanced to the next 
             element; false if the enumerator has passed the end of the collection.
             </returns>
            
             <exception cref="T:System.InvalidOperationException">
             The collection was modified after the enumerator was created. 
             </exception>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractEnumerator`1.FetchCurrent">
            <summary>
            Fetch the current element of the enumerator.
            </summary>
            <returns>The current element</returns>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources. This implementation does nothing.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractEnumerator`1.MoveNext">
             <summary>
             Advances the enumerator to the next element of the collection.
             </summary>
            
             <returns>
             true if the enumerator was successfully advanced to the next 
             element; false if the enumerator has passed the end of the collection.
             </returns>
            
             <exception cref="T:System.InvalidOperationException">
             The collection was modified after the enumerator was created. 
             </exception>
             <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before 
            the first element in the collection. This implementation
            always throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            <remarks>
            This method is intentionally sealed. Derived class should override
            <see cref="M:Spring.Collections.Generic.AbstractEnumerator`1.DoReset"/> protected method instead.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Always thown.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. 
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spring.Collections.Generic.AbstractEnumerator`1.DoReset">
            <summary>
            For derived class to implement the <see cref="M:Spring.Collections.Generic.AbstractEnumerator`1.Reset"/> function. 
            This implmenetation always throw <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Spring.Collections.Generic.AbstractEnumerator`1.Current">
             <summary>
             Gets the element in the collection at the current position of the 
             enumerator.
             </summary>
            
             <returns>
             The element in the collection at the current position of the 
             enumerator.
             </returns>
            
        </member>
        <member name="T:Spring.Collections.Generic.AbstractEnumerator`1.EnumeratorState">
            <summary>
            Indicates if the enumerator has not startet, is in progress, 
            or has already finished.
            </summary>
        </member>
        <member name="F:Spring.Collections.Generic.AbstractEnumerator`1.EnumeratorState.BeforeStart">
            <summary>
            Enuemrator has not started.
            </summary>
        </member>
        <member name="F:Spring.Collections.Generic.AbstractEnumerator`1.EnumeratorState.InProgress">
            <summary>
            Enuemrator is in progress.
            </summary>
        </member>
        <member name="F:Spring.Collections.Generic.AbstractEnumerator`1.EnumeratorState.AfterFinish">
            <summary>
            Enuemrator has already finished.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.EnumerableToArrayBuffer`1.CopyTo(`0[],System.Int32)">
            <summary>
            Caller to guarantee items.Length > index >= 0
            </summary>
        </member>
        <member name="T:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1">
            <summary> 
            An optionally-bounded <see cref="T:Spring.Threading.Collections.Generic.IBlockingQueue`1"/> based on
            linked nodes.
            </summary>
            <remarks>
            <para>
            This queue orders elements FIFO (first-in-first-out).
            The <b>head</b> of the queue is that element that has been on the
            queue the longest time.
            The <b>tail</b> of the queue is that element that has been on the
            queue the shortest time. New elements
            are inserted at the tail of the queue, and the queue retrieval
            operations obtain elements at the head of the queue.
            Linked queues typically have higher throughput than array-based queues but
            less predictable performance in most concurrent applications.
            </para>
            <para>
            The optional capacity bound constructor argument serves as a
            way to prevent excessive queue expansion. The capacity, if unspecified,
            is equal to <see cref="F:System.Int32.MaxValue"/>.  Linked nodes are
            dynamically created upon each insertion unless this would bring the
            queue above capacity.
            </para>
            </remarks>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="F:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1._capacity">
            <summary>The capacity bound, or <see cref="F:System.Int32.MaxValue"/> if none </summary>
        </member>
        <member name="F:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1._activeCount">
            <summary>Current number of elements </summary>
        </member>
        <member name="F:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1._head">
            <summary>Head of linked list </summary>
        </member>
        <member name="F:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1._last">
            <summary>Tail of linked list </summary>
        </member>
        <member name="F:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1._takeLock">
            <summary>Lock held by take, poll, etc </summary>
        </member>
        <member name="F:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1._putLock">
            <summary>Lock held by put, offer, etc </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.#ctor">
            <summary> Creates a <see cref="T:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1"/> with a capacity of
            <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.#ctor(System.Int32)">
            <summary> Creates a <see cref="T:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1"/> with the given (fixed) capacity.</summary>
            <param name="capacity">the capacity of this queue</param>
            <exception cref="T:System.ArgumentException">if the <paramref name="capacity"/> is not greater than zero.</exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary> Creates a <see cref="T:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1"/> with a capacity of
            <see cref="F:System.Int32.MaxValue"/>, initially containing the elements o)f the
            given collection, added in traversal order of the collection's iterator.
            </summary>
            <param name="collection">the collection of elements to initially contain</param>
            <exception cref="T:System.ArgumentNullException">if the collection or any of its elements are null.</exception>
            <exception cref="T:System.ArgumentException">if the collection size exceeds the capacity of this queue.</exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Reconstitute this queue instance from a stream (that is,
            deserialize it).
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
             </summary>
             <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
             <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Put(`0)">
            <summary> 
            Inserts the specified element into this queue, waiting if necessary
            for space to become available.
            </summary>
            <param name="element">the element to add</param>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if interrupted while waiting.
            </exception>
            <exception cref="T:Spring.Threading.Collections.Generic.QueueBrokenException">
            If the queue is already <see cref="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.IsBroken">closed</see>.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.TryPut(`0)">
            <summary>
            Inserts the specified element into this queue, waiting if necessary
            for space to become available.
            </summary>
            <remarks>
            <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Break"/> the queue will cause a waiting <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.TryPut(`0)"/>
            to returned <c>false</c>. This is very useful to indicate that the
            consumer is stopped or going to stop so that the producer should not 
            put more items into the queue.
            </remarks>
            <param name="element">the element to add</param>
            <returns>
            <c>true</c> if succesfully and <c>false</c> if queue <see cref="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.IsBroken"/>.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if interrupted while waiting.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Offer(`0,System.TimeSpan)">
            <summary> 
            Inserts the specified element into this queue, waiting up to the
            specified wait time if necessary for space to become available.
            </summary>
            <param name="element">the element to add</param>
            <param name="duration">how long to wait before giving up</param>
            <returns> <c>true</c> if successful, or <c>false</c> if
            the specified waiting time elapses before space is available
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if interrupted while waiting.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Offer(`0)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions.
            </summary>
            <remarks>
            When using a capacity-restricted queue, this method is generally
            preferable to <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Add(`0)"/>,
            which can fail to insert an element only by throwing an exception.
            </remarks>
            <param name="element">
            The element to add.
            </param>
            <returns>
            <c>true</c> if the element was added to this queue.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Take">
            <summary> 
            Retrieves and removes the head of this queue, waiting if necessary
            until an element becomes available.
            </summary>
            <returns> the head of this queue</returns>
            <exception cref="T:Spring.Threading.Collections.Generic.QueueBrokenException">
            If the queue is empty and already <see cref="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.IsBroken">closed</see>.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.TryTake(`0@)">
            <summary> 
            Retrieves and removes the head of this queue, waiting if necessary
            until an element becomes available.
            </summary>
            <remarks>
            <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Break"/> the queue will cause a waiting <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.TryTake(`0@)"/>
            to returned <c>false</c>. This is very useful to indicate that the
            producer is stopped so that the producer should stop waiting for
            element from queu.
            </remarks>
            <param name="element">
            The head of this queue if successful.
            </param>
            <returns>
            <c>true</c> if succesfully and <c>false</c> if queue is empty and 
            <see cref="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.IsBroken">closed</see>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Poll(System.TimeSpan,`0@)">
            <summary> 
            Retrieves and removes the head of this queue, waiting up to the
            specified wait time if necessary for an element to become available.
            </summary>
            <param name="element">
            Set to the head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <param name="duration">How long to wait before giving up.</param>
            <returns> 
            <c>false</c> if the queue is still empty after waited for the time 
            specified by the <paramref name="duration"/>. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Poll(`0@)">
            <summary>
            Retrieves and removes the head of this queue into out parameter
            <paramref name="element"/>. 
            </summary>
            <param name="element">
            Set to the head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <returns>
            <c>false</c> if the queue is empty. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Peek(`0@)">
            <summary>
            Retrieves, but does not remove, the head of this queue into out
            parameter <paramref name="element"/>.
            </summary>
            <param name="element">
            The head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <returns>
            <c>false</c> is the queue is empty. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Remove(`0)">
            <summary> 
            Removes a single instance of the specified element from this queue,
            if it is present.  
            </summary>
            <remarks> 
            If this queue contains one or more such elements.
            Returns <c>true</c> if this queue contained the specified element
            (or equivalently, if this queue changed as a result of the call).
            </remarks>
            <param name="objectToRemove">element to be removed from this queue, if present</param>
            <returns><c>true</c> if this queue changed as a result of the call</returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.DoDrain(System.Action{`0},System.Predicate{`0})">
            <summary>
            Does the real work for the <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0})"/>
            and <see cref="M:Spring.Collections.Generic.AbstractQueue`1.Drain(System.Action{`0},System.Predicate{`0})"/>.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.DoDrain(System.Action{`0},System.Int32,System.Predicate{`0})">
            <summary> 
            Does the real work for all drain methods. Caller must
            guarantee the <paramref name="action"/> is not <c>null</c> and
            <paramref name="maxElements"/> is greater then zero (0).
            </summary>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32)"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Predicate{`0})"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0},System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.DoCopyTo(`0[],System.Int32,System.Boolean)">
            <summary>
            Does the actual work of copying to array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the 
            destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. 
            The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <param name="ensureCapacity">
            If is <c>true</c>, calls <see cref="M:Spring.Collections.Generic.AbstractCollection`1.EnsureCapacity(`0[],System.Int32)"/>
            </param>
            <returns>
            A new array of same runtime type as <paramref name="array"/> if 
            <paramref name="array"/> is too small to hold all elements and 
            <paramref name="ensureCapacity"/> is <c>false</c>. Otherwise
            the <paramref name="array"/> instance itself.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Contains(`0)">
            <summary>
            test whether the queue contains <paramref name="item"/> 
            </summary>
            <param name="item">the item whose containement should be checked</param>
            <returns><c>true</c> if item is in the queue, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Break">
            <summary>
            Breaks current queue. 
            </summary>
            <remarks>
            <para>
            When a queue is broken, all blocking actions and subsequent put
            actions will return immediately with unsuccesful status or 
            <see cref="T:Spring.Threading.Collections.Generic.QueueBrokenException"/> is thrown if method doesn't 
            return any status. Subsequent get actions will continue to sucess
            until the queue becomes empty.
            </para>
            <para>
            <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Break"/> allows remaining elements in the queue to
            be consumed by subsequent get actions. Use <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Stop"/> 
            to break and clear the queue in the same time, which effectively
            ensures any subsequent get action to fail.
            </para>
            <para>
            Use <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Clear"/> to restore the queue back to normal state.
            </para>
            </remarks>
            <seealso cref="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.IsBroken"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Stop"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Clear"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Stop">
            <summary>
            <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Break"/>s and empties current queue. 
            </summary>
            <remarks>
            <para>
            As soon as a queue is stopped, all blocking queue modification 
            actions return immediately with unsuccesful status or 
            <see cref="T:Spring.Threading.Collections.Generic.QueueBrokenException"/> is thrown if method doesn't 
            return any status. So do any subsequent queue modification
            actions.
            </para>
            <para>
            Use <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Break"/> to only affect put operations but allowing
            get operations to continue untile queue is empty.
            </para>
            <para>
            Use <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Clear"/> to restore the queue back to normal state.
            </para>
            </remarks>
            <seealso cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Break"/>
            <seealso cref="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.IsBroken"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Clear"/>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.ToString">
            <summary>
            Returns a string representation of this colleciton.
            </summary>
            <returns>String representation of the elements of this collection.</returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Clear">
            <summary> 
            Removes all of the elements from this queue and reopen the queue if
            it was closed.
            </summary>
            <remarks>
            <p>
            The queue will be empty after this call returns.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.GetEnumerator">
            <summary> 
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> over the elements in this 
            queue in proper sequence.
            </summary>
            <remarks>
            The returned <see cref="T:System.Collections.Generic.IEnumerator`1"/> is a "weakly consistent" 
            enumerator that will not throw <see cref="T:System.InvalidOperationException"/> 
            when the queue is concurrently modified, and guarantees to traverse
            elements as they existed upon construction of the enumerator, and
            may (but is not guaranteed to) reflect any modifications subsequent
            to construction.
            </remarks>
            <returns>
            An enumerator over the elements in this queue in proper sequence.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.SignalNotEmpty">
            <summary> 
            Signals a waiting take. Called only from put/offer (which do not
            otherwise ordinarily lock _takeLock.)
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.SignalNotFull">
            <summary> Signals a waiting put. Called only from take/poll.</summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Insert(`0)">
            <summary> 
            Creates a node and links it at end of queue.</summary>
            <param name="x">the item to insert</param>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Extract">
            <summary>Removes a node from head of queue,</summary>
            <returns>the node</returns>
        </member>
        <member name="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.RemainingCapacity">
            <summary> 
            Returns the number of additional elements that this queue can ideally
            (in the absence of memory or resource constraints) accept without
            blocking. This is always equal to the initial capacity of this queue
            minus the current <see cref="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Count"/> of this queue.
            </summary>
            <remarks> 
            Note that you <b>cannot</b> always tell if an attempt to insert
            an element will succeed by inspecting <see cref="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.RemainingCapacity"/>
            because it may be the case that another thread is about to
            insert or remove an element.
            </remarks>
        </member>
        <member name="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Capacity">
            <summary>
            Gets the capacity of this queue.
            </summary>
        </member>
        <member name="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Count">
            <summary>
            Gets the count of the queue. 
            </summary>
        </member>
        <member name="P:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.IsBroken">
            <summary>
            Indicate if current queue is broken. A broken queue never blocks.
            </summary>
            <para>
            When a queue is broken, all blocking actions and subsequent put
            actions will return immediately with unsuccesful status or 
            <see cref="T:Spring.Threading.Collections.Generic.QueueBrokenException"/> is thrown if method doesn't 
            return any status. Subsequent get actions will continue to sucess
            until the queue becomes empty, then further get actions will return
            unsuccesful status or throws <see cref="T:Spring.Threading.Collections.Generic.QueueBrokenException"/>.
            </para>
            <para>
            Use <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Break"/> or <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Stop"/> to break a queue.
            </para>
            <para>
            Use <see cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Clear"/> to restore the queue back to normal state.
            </para>
            <seealso cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Break"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Stop"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.Clear"/>
        </member>
        <member name="T:Spring.Threading.Collections.Generic.LinkedBlockingQueue`1.LinkedBlockingQueueEnumerator">
            <summary>
            Internal enumerator class
            </summary>
        </member>
        <member name="T:Spring.Threading.Collections.Generic.QueueBrokenException">
            <summary>
            Exception to indicate a queue is already broken.
            </summary>
        </member>
        <member name="T:Spring.Threading.Collections.Generic.SynchronousQueue`1">
            <summary>
            A <see cref="T:Spring.Threading.Collections.Generic.IBlockingQueue`1">blocking queue</see> in which each 
            insert operation must wait for a corresponding remove operation by 
            another thread, and vice versa.
            </summary>
            <remarks>
            <para>
            A synchronous queue does not have any internal capacity, not even 
            a capacity of one.  You cannot <see cref="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Peek(`0@)"/> at a synchronous 
            queue because an element is only present when you try to remove it; 
            you cannot insert an element (using any method) unless another thread 
            is trying to remove it; you cannot iterate as there is nothing to 
            iterate.  The <i>head</i> of the queue is the element that the first 
            queued inserting thread is trying to add to the queue; if there is no 
            such queued thread then no element is available for removal and
            <see cref="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Poll(`0@)"/> will return <c>false</c>.  For purposes of 
            other <see cref="T:System.Collections.Generic.ICollection`1"/> methods (for example <c>Contains</c>), 
            a <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/> acts as an empty collection.
            </para>
            <para>
            Synchronous queues are similar to rendezvous channels used in
            CSP and Ada. They are well suited for handoff designs, in which an
            object running in one thread must sync up with an object running
            in another thread in order to hand it some information, event, or
            task.
            </para>
            <para>
            This class supports an optional fairness policy for ordering
            waiting producer and consumer threads.  By default, this ordering
            is not guaranteed. However, a queue constructed with fairness set
            to <c>true</c> grants threads access in FIFO order. Fairness
            generally decreases throughput but reduces variability and avoids
            starvation.
            </para>
            </remarks>
            <author>Doug Lea</author>
            <author>Andreas Döhring (.NET)</author>
            <author>Kenneth Xu</author>
        </member>
        <member name="F:Spring.Threading.Collections.Generic.SynchronousQueue`1._qlock">
            Lock protecting both wait queues 
        </member>
        <member name="F:Spring.Threading.Collections.Generic.SynchronousQueue`1._waitingProducers">
            Queue holding waiting puts 
        </member>
        <member name="F:Spring.Threading.Collections.Generic.SynchronousQueue`1._waitingConsumers">
            Queue holding waiting takes 
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.#ctor">
            <summary>
            Creates a <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/> with nonfair access policy.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.#ctor(System.Boolean)">
            <summary>
            Creates a <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/> with specified fairness policy.
            </summary>
            <param name="fair">
            if true, threads contend in FIFO order for access otherwise the order is unspecified.
            </param>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.UnlinkCancelledConsumer(Spring.Threading.Collections.Generic.SynchronousQueue{`0}.Node)">
            <summary>
            Unlinks the given node from consumer queue.  Called by cancelled
            (timeout, interrupt) waiters to avoid garbage retention in the
            absence of producers.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.UnlinkCancelledProducer(Spring.Threading.Collections.Generic.SynchronousQueue{`0}.Node)">
            <summary>
            Unlinks the given node from producer queue.  Symmetric to 
            <see cref="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.UnlinkCancelledConsumer(Spring.Threading.Collections.Generic.SynchronousQueue{`0}.Node)"/>.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Put(`0)">
            <summary> 
            Inserts the specified element into this queue, waiting if necessary
            another thread to receive it.
            </summary>
            <param name="element">the element to add</param>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if interrupted while waiting.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Offer(`0,System.TimeSpan)">
            <summary> 
            Inserts the specified element into this queue, waiting up to the
            specified wait time if necessary for another thread to receive it.
            </summary>
            <param name="element">The element to add.</param>
            <param name="duration">How long to wait before giving up.</param>
            <returns>
            <see langword="true"/> if successful, or <see langword="false"/> if
            the specified waiting time elapses before space is available.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if interrupted while waiting.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Take">
            <summary> 
            Retrieves and removes the head of this queue, waiting if necessary
            until another thread inserts it.
            </summary>
            <returns> the head of this queue</returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if interrupted while waiting.
            </exception>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Poll(System.TimeSpan,`0@)">
            <summary> 
            Retrieves and removes the head of this queue, waiting up to the
            specified wait time if necessary for another thread to insert it.
            </summary>
            <param name="element">
            Set to the head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <param name="duration">How long to wait before giving up.</param>
            <returns> 
            <c>false</c> if the queue is still empty after waited for the time 
            specified by the <paramref name="duration"/>. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Offer(`0)">
            <summary>
            Inserts the specified element into this queue if another thread if
            waiting to receive it. Otherwise return <c>false</c> immediately.
            </summary>
            <param name="element">The element to add.</param>
            <returns>
            <c>true</c> if the element was added to this queue. Otherwise 
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Poll(`0@)">
            <summary>
            Retrieves and removes the head of this queue into out parameter
            <paramref name="element"/>, if another thead is currently making
            an element available. Otherwise return <c>false</c> immediately.
            </summary>
            <param name="element">
            Set to the head of this queue. <c>default(T)</c> if queue is empty.
            </param>
            <returns>
            <c>false</c> if the queue is empty. Otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Clear">
            <summary>
            Does nothing. A <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/>
            has no internal capacity.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Contains(`0)">
            <summary>
            Always returns <c>false</c>. A <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/>
            has no internal capacity.
            </summary>
            <returns>Always <c>false</c>.</returns>
            <param name="item">
            The object to locate in the <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/>.
            </param>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Remove(`0)">
            <summary>
            Always returns <c>false</c>. A <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/>
            has no internal capacity.
            </summary>
            <returns>Always <c>false</c>.</returns>
            <param name="item">
            The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Peek(`0@)">
            <summary>
            Always returns <c>false</c>. A <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/>
            does not return elements unless actively waited on.
            </summary>
            <param name="element">
            Always set to <c>default(T)</c>.
            </param>
            <returns>Always <c>false</c>.</returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.GetEnumerator">
            <summary>
            Returns an empty enumerator in which <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            always returns <c>false</c>.
            </summary>
            <returns>
            An empty <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.DoCopyTo(`0[],System.Int32,System.Boolean)">
            <summary>
            Does nothing. A <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/>
            has no internal capacity.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the 
            destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. 
            The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            Ignored.
            </param>
            <param name="ensureCapacity">
            Ignored.
            </param>
            <returns>
            The <paramref name="array"/> instance itself.
            </returns>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.DoDrain(System.Action{`0},System.Int32,System.Predicate{`0})">
            <summary> 
            Does the real work for all <c>Drain</c> methods. Caller must
            guarantee the <paramref name="action"/> is not <c>null</c> and
            <paramref name="maxElements"/> is greater then zero (0).
            </summary>
            <remarks>
            Since the queue has no capacity. This method does nothing and 
            returns zero(0) if <paramref name="criteria"/> is not <c>null</c>.
            Otherwise, one or zero element will be processed depends on the
            result of <see cref="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Poll(`0@)"/>.
            </remarks>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0})"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32)"/>
            <seealso cref="M:Spring.Collections.Generic.IQueue`1.Drain(System.Action{`0})"/>
            <seealso cref="M:Spring.Threading.Collections.Generic.IBlockingQueue`1.DrainTo(System.Collections.Generic.ICollection{`0},System.Int32)"/>
        </member>
        <member name="P:Spring.Threading.Collections.Generic.SynchronousQueue`1.IsEmpty">
            <summary>
            Always returns <c>true</c>.
            A <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/> has no internal capacity.
            </summary>
        </member>
        <member name="P:Spring.Threading.Collections.Generic.SynchronousQueue`1.Count">
            <summary>
            Always returns zero(0).
            A <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/> has no internal capacity.
            </summary>
        </member>
        <member name="P:Spring.Threading.Collections.Generic.SynchronousQueue`1.RemainingCapacity">
            <summary>
            Always returns zero.
            A <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/> has no internal capacity.
            </summary>
        </member>
        <member name="P:Spring.Threading.Collections.Generic.SynchronousQueue`1.Capacity">
            <summary>
            Always returns zero.
            A <see cref="T:Spring.Threading.Collections.Generic.SynchronousQueue`1"/> has no internal capacity.
            </summary>
        </member>
        <member name="T:Spring.Threading.Collections.Generic.SynchronousQueue`1.IWaitQueue">
            <summary>
            Queue to hold waiting puts/takes; specialized to Fifo/Lifo below.
            These queues have all transient fields, but are serializable
            in order to recover fairness settings when deserialized.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.IWaitQueue.Enqueue(`0)">
            <summary>
            Creates, adds, and returns node for x
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.IWaitQueue.Dequeue">
            <summary>
            Removes and returns node, or null if empty.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.IWaitQueue.Unlink(Spring.Threading.Collections.Generic.SynchronousQueue{`0}.Node)">
            <summary>
            Removes a cancelled node to avoid garbage retention.
            </summary>
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.IWaitQueue.ShouldUnlink(Spring.Threading.Collections.Generic.SynchronousQueue{`0}.Node)">
            <summary>
            Returns true if a cancelled node might be on queue.
            </summary>
        </member>
        <member name="T:Spring.Threading.Collections.Generic.SynchronousQueue`1.FifoWaitQueue">
            <summary>
            FIFO queue to hold waiting puts/takes.
            </summary>
        </member>
        <member name="T:Spring.Threading.Collections.Generic.SynchronousQueue`1.LifoWaitQueue">
            <summary>
            LIFO queue to hold waiting puts/takes.
            </summary>
        </member>
        <member name="T:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node">
            <summary>
            Nodes each maintain an item and handle waits and signals for
            getting and setting it. The class extends
            AbstractQueuedSynchronizer to manage blocking, using AQS state
             0 for waiting, 1 for ack, -1 for cancelled.
            </summary>
        </member>
        <member name="F:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.Ack">
            Synchronization state value representing that node acked 
        </member>
        <member name="F:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.Cancel">
            Synchronization state value representing that node cancelled 
        </member>
        <member name="F:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node._item">
            The item being transferred 
        </member>
        <member name="F:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.Next">
            Next node in wait queue 
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.#ctor(`0)">
            Creates a node with initial item 
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.#ctor(`0,Spring.Threading.Collections.Generic.SynchronousQueue{`0}.Node)">
            Creates a node with initial item and next 
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.Extract">
             Takes item and nulls out field (for sake of GC)
            
             PRE: lock owned
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.CheckCancellationOnInterrupt(System.Threading.ThreadInterruptedException)">
             Tries to cancel on interrupt; if so rethrowing,
             else setting interrupt state
            
             PRE: lock owned
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.SetItem(`0)">
            Fills in the slot created by the consumer and signal consumer to
            continue.
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.GetItem(`0@)">
            Removes item from slot created by producer and signal producer
            to continue.
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.WaitForTake">
            Waits for a consumer to take item placed by producer.
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.WaitForPut">
            Waits for a producer to put item placed by consumer.
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.WaitForTake(System.TimeSpan)">
            Waits for a consumer to take item placed by producer or time out.
        </member>
        <member name="M:Spring.Threading.Collections.Generic.SynchronousQueue`1.Node.WaitForPut(System.TimeSpan,`0@)">
            Waits for a producer to put item placed by consumer, or time out.
        </member>
        <member name="T:Spring.Threading.Helpers.FIFOWaitQueue">
            <summary> 
            Simple linked list queue used in FIFOSemaphore.
            Methods are not locked; they depend on synch of callers.
            NOTE: this class is NOT present in java.util.concurrent.
            </summary>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Kenneth Xu</author>
        </member>
        <member name="T:Spring.Threading.Helpers.IWaitQueue">
            <summary> 
            Interface for internal queue classes for semaphores, etc.
            Relies on implementations to actually implement queue mechanics.
            NOTE: this interface is NOT present in java.util.concurrent.
            </summary>	
            <author>Dawid Kurzyniec</author>
            <author>Griffin Caprio (.NET)</author>
            <changes>
            <list>
            <item>Renamed Insert to Enqueue</item>
            <item>Renamed Extract to Dequeue</item>
            </list>
            </changes>
        </member>
        <member name="T:Spring.Threading.Helpers.IQueuedSync">
            <summary>
            Used by <see cref="T:Spring.Threading.Helpers.WaitNode"/>.
            NOTE: this class is NOT present in java.util.concurrent.
            </summary>
        </member>
        <member name="T:Spring.Threading.Helpers.WaitNode">
            <summary>
            The wait node used by implementations of <see cref="T:Spring.Threading.Helpers.IWaitQueue"/>.
            NOTE: this class is NOT present in java.util.concurrent.
            </summary>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Kenneth Xu</author>
        </member>
        <member name="T:Spring.Threading.Locks.ConditionVariable">
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Kenneth Xu</author>
        </member>
        <member name="T:Spring.Threading.Locks.ICondition">
            <summary>
            <see cref="T:Spring.Threading.Locks.ICondition"/> factors out the <see cref="T:System.Threading.Monitor"/>
            methods <see cref="M:System.Threading.Monitor.Wait(System.Object)"/>, <see cref="M:System.Threading.Monitor.Pulse(System.Object)"/>
            and <see cref="M:System.Threading.Monitor.PulseAll(System.Object)"/> into distinct objects to
            give the effect of having multiple wait-sets per object, by combining
            them with the use of arbitrary <see cref="T:Spring.Threading.Locks.ILock"/> implementations.
            Where a <see cref="T:Spring.Threading.Locks.ILock"/> replaces the use of <c>lock</c> statements
            or <see cref="M:System.Threading.Monitor.Enter(System.Object)"/> and <see cref="M:System.Threading.Monitor.Exit(System.Object)"/> methods,
            a <see cref="T:Spring.Threading.Locks.ICondition"/> replaces the use of the wait and pause
            methods of <see cref="T:System.Threading.Monitor"/>.
            </summary>
            <remarks>
            <para>
            Conditions (also known as <b>condition queues</b> or <b>condition
            variables</b>) provide a means for one thread to suspend execution (to
            'wait') until notified by another thread that some state condition may
            now be true.  Because access to this shared state information occurs
            in different threads, it must be protected, so a lock of some form is
            associated with the condition. The key property that waiting for a
            condition provides is that it <b>atomically</b> releases the associated
            lock and suspends the current thread, just like
            <see cref="M:System.Threading.Monitor.Wait(System.Object)"/>.
            </para>
            <para>
            An <see cref="T:Spring.Threading.Locks.ICondition"/> instance is intrinsically bound to a lock.
            To obtain a <see cref="T:Spring.Threading.Locks.ICondition"/> instance for a particular
            <see cref="T:Spring.Threading.Locks.ILock"/> instance use its <see cref="M:Spring.Threading.Locks.ILock.NewCondition"/>
            method.
            </para>
            <example>
            As an example, suppose we have a bounded buffer which supports put and
            take methods.  If a take is attempted on an empty buffer, then the
            thread will block until an item becomes available; if a put is attempted
            on a full buffer, then the thread will block until a space becomes
            available.  We would like to keep waiting put threads and take threads
            in separate wait-sets so that we can use the optimization of only
            notifying a single thread at a time when items or spaces become available
            in the buffer. This can be achieved using two <see cref="T:Spring.Threading.Locks.ICondition"/>
            instances.
            <code language="c#">
            class BoundedBuffer {
            	readonly ILock lock = new ReentrantLock();
            	readonly ICondition notFull  = lock.NewCondition();
            	readonly ICondition notEmpty = lock.NewCondition();
            
            	readonly object[] items = new object[100];
            	int putptr, takeptr, count;
            
            	public void Put(object x) {
            		using(lock.Lock()) {
            			while (count == items.Length) {
            				notFull.Await();
            				items[putptr] = x;
             				if (++putptr == items.Length) putptr = 0;
             				++count;
             				notEmpty.Signal();
             			}
            		}
                }
             
                public object Take() {
            		using(lock.Lock()) {
             			while (count == 0) {
             				notEmpty.Await();
             				object x = items[takeptr];
             				if (++takeptr == items.Length) takeptr = 0;
             				--count;
             				notFull.Signal();
             			return x;
             		}
             	}
            }
            </code>
            
            (The <see cref="!:ArrayBlockingQueue&lt;T&gt;"/> class provides this
            functionality, so there is no reason to implement this sample usage
            class.)
            </example>
            <para>
            An <see cref="T:Spring.Threading.Locks.ICondition"/> implementation can provide behavior and
            semantics that is different from that of the <see cref="T:System.Threading.Monitor"/>
            methods, such as guaranteed ordering for notifications, or not
            requiring a lock to be held when performing notifications. If an
            implementation provides such specialized semantics then the
            implementation must document those semantics.
            </para>
            <para>
            Note that <see cref="T:Spring.Threading.Locks.ICondition"/> instances are just normal objects
            and can themselves be used as the target in a synchronized statement,
            and can have <see cref="M:System.Threading.Monitor.Wait(System.Object)"/> and
            <see cref="M:System.Threading.Monitor.Pulse(System.Object)"/> methods invoked on them. Acquiring
            the monitor lock of a <see cref="T:Spring.Threading.Locks.ICondition"/> instance, or using it as
            a parameter to <see cref="T:System.Threading.Monitor"/> methods, has no specified
            relationship with acquiring the <see cref="T:Spring.Threading.Locks.ILock"/> associated with
            that <see cref="T:Spring.Threading.Locks.ICondition"/> or the use of its <see cref="M:Spring.Threading.Locks.ICondition.Await"/>
            and <see cref="M:Spring.Threading.Locks.ICondition.Signal"/> methods. It is recommended that to avoid
            confusion you never use <see cref="T:Spring.Threading.Locks.ICondition"/> instances in this way,
            except perhaps within their own implementation.
            </para>
            <para>
            Except where noted, passing a <c>null</c> value for any parameter
            will result in a <see cref="T:System.NullReferenceException"/> being thrown.
            </para>
            <para>
            <b>Implementation Considerations</b>
            </para>
            <para>
            When waiting upon a <see cref="T:Spring.Threading.Locks.ICondition"/>, a '<b>spurious wakeup</b>'
            is permitted to occur, in general, as a concession to the underlying
            platform semantics. This has little practical impact on most application
            programs as a <see cref="T:Spring.Threading.Locks.ICondition"/> should always be waited upon in
            a loop, testing the state predicate that is being waited for.  An
            implementation is free to remove the possibility of spurious wakeups
            but it is recommended that applications programmers always assume that
            they can occur and so always wait in a loop.
            </para>
            <para>
            The three forms of condition waiting (interruptible, non-interruptible,
            and timed) may differ in their ease of implementation on some platforms
            and in their performance characteristics. In particular, it may be
            difficult to provide these features and maintain specific semantics
            such as ordering guarantees.  Further, the ability to interrupt the
            actual suspension of the thread may not always be feasible to implement
            on all platforms.
            </para>
            <para>
            Consequently, an implementation is not required to define exactly the
            same guarantees or semantics for all three forms of waiting, nor is it
            required to support interruption of the actual suspension of the thread.
            </para>
            <para>
            An implementation is required to clearly document the semantics and
            guarantees provided by each of the waiting methods, and when an
            implementation does support interruption of thread suspension then it
            must obey the interruption semantics as defined in this interface.
            </para>
            <para>
            As interruption generally implies cancellation, and checks for
            interruption are often infrequent, an implementation can favor responding
            to an interrupt over normal method return. This is true even if it can be
            shown that the interrupt occurred after another action may have unblocked
            the thread. An implementation should document this behavior.
            </para>
            </remarks>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
        </member>
        <member name="M:Spring.Threading.Locks.ICondition.Await">
            <summary> 
            Causes the current thread to wait until it is signalled or
            <see cref="M:System.Threading.Thread.Interrupt"/> is called.
            </summary>
            <remarks>
            <para>
            The lock associated with this <see cref="T:Spring.Threading.Locks.ICondition"/> is atomically
            released and the current thread becomes disabled for thread scheduling
            purposes and lies dormant until <b>one</b> of four things happens:
            <list type="bullet">
            <item>Some other thread invokes the <see cref="M:Spring.Threading.Locks.ICondition.Signal"/> method
            for this <see cref="T:Spring.Threading.Locks.ICondition"/> and the current thread happens to
            be chosen as the thread to be awakened.</item>
            <item>Some other thread invokes the <see cref="M:Spring.Threading.Locks.ICondition.SignalAll"/>}
            method for this <see cref="T:Spring.Threading.Locks.ICondition"/>.</item>
            <item>Some other thread <see cref="M:System.Threading.Thread.Interrupt"/> is called
            the current thread, and interruption of thread suspension is
            supported.</item>
            <item>A '<b>spurious wakeup</b>' occurs.</item>
            </list>
            </para>
            <para>
            In all cases, before this method can return the current thread must
            re-acquire the lock associated with this condition. When the thread
            returns it is <b>guaranteed</b> to hold this lock.
            </para>
            <para>
            If the current thread:
            <list type="bullet">
            <item>has its interrupted status set on entry to this method</item>
            <item><see cref="M:System.Threading.Thread.Interrupt"/> is called while waiting
            and interruption of thread suspension is supported</item>
            </list>
            then <see cref="T:System.Threading.ThreadInterruptedException"/> is thrown and the current thread's
            interrupted status is cleared. It is not specified, in the first
            case, whether or not the test for interruption occurs before the lock
            is released.
            </para>
            <para>
            <b>Implementation Considerations</b>
            </para>
            <para>
            The current thread is assumed to hold the lock associated with this
            <see cref="T:Spring.Threading.Locks.ICondition"/> when this method is called.
            It is up to the implementation to determine if this is
            the case and if not, how to respond. Typically, an exception will be
            thrown (such as <see cref="T:System.Threading.SynchronizationLockException"/>) and the
            implementation must document that fact.
            </para>
            <para>
            An implementation can favor responding to an interrupt over normal
            method return in response to a signal. In that case the implementation
            must ensure that the signal is redirected to another waiting thread, if
            there is one.
            </para>
            </remarks>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            if the current threada is interrupted (and interruption of thread suspension is supported.
            </exception>
        </member>
        <member name="M:Spring.Threading.Locks.ICondition.AwaitUninterruptibly">
            <summary>
            Causes the current thread to wait until it is signalled.
            </summary>
            <remarks>
            <para>
            The lock associated with this condition is atomically
            released and the current thread becomes disabled for thread scheduling
            purposes and lies dormant until <b>one</b> of three things happens:
            <list type="bullet">
            <item>Some other thread invokes the <see cref="M:Spring.Threading.Locks.ICondition.Signal"/> method
            for this <see cref="T:Spring.Threading.Locks.ICondition"/> and the current thread happens to
            be chosen as the thread to be awakened.</item>
            <item>Some other thread invokes the <see cref="M:Spring.Threading.Locks.ICondition.SignalAll"/>} method
            for this <see cref="T:Spring.Threading.Locks.ICondition"/>.</item>
            <item>A '<b>spurious wakeup</b>' occurs.</item>
            </list>
            </para>
            <para>
            In all cases, before this method can return the current thread must
            re-acquire the lock associated with this condition. When the
            thread returns it is <b>guaranteed</b> to hold this lock.
            </para>
            <para>
            If the current thread's interrupted status is set when it enters
            this method, or <see cref="M:System.Threading.Thread.Interrupt"/> is called
            while waiting, it will continue to wait until signalled. When it finally
            returns from this method its interrupted status will still
            be set.
            </para>
            <para>
            <b>Implementation Considerations</b>
            <br/>
            The current thread is assumed to hold the lock associated with this
            <see cref="T:Spring.Threading.Locks.ICondition"/> when this method is called.
            It is up to the implementation to determine if this is
            the case and if not, how to respond. Typically, an exception will be
            thrown (such as <see cref="T:System.Threading.SynchronizationLockException"/>) and the
            implementation must document that fact.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Threading.Locks.ICondition.Await(System.TimeSpan)">
            <summary>
            Causes the current thread to wait until it is signalled or interrupted,
            or the specified waiting time elapses.
            </summary>
            <remarks>
            <para>
            The lock associated with this condition is atomically
            released and the current thread becomes disabled for thread scheduling
            purposes and lies dormant until <i>one</i> of five things happens:
            <list type="bullet">
            <item>Some other thread invokes the <see cref="M:Spring.Threading.Locks.ICondition.Signal"/> method for this
            <c>Condition</c> and the current thread happens to be chosen as the
            thread to be awakened; or</item>
            <item>Some other thread invokes the <see cref="M:Spring.Threading.Locks.ICondition.SignalAll"/> method for this
            <c>Condition</c>; or</item>
            <item>Some other thread <see cref="M:System.Threading.Thread.Interrupt">interrupts</see> the
            current thread, and interruption of thread suspension is supported; or</item>
            <item>The specified waiting time elapses; or</item>
            <item>A "<i>spurious wakeup</i>" occurs.</item>
            </list>
            </para>
            <para>
            In all cases, before this method can return the current thread must
            re-acquire the lock associated with this condition. When the
            thread returns it is <i>guaranteed</i> to hold this lock.
            </para>
            <para>
            If the current thread:
            <list type="bullet">
            <item>has its interrupted status set on entry to this method; or</item>
            <item>is <see cref="M:System.Threading.Thread.Interrupt">interrupts</see> while waiting
            and interruption of thread suspension is supported,</item>
            </list>
            then <see cref="T:System.Threading.ThreadInterruptedException"/> is thrown and the current
            thread's interrupted status is cleared. It is not specified, in the first
            case, whether or not the test for interruption occurs before the lock
            is released.
            </para>
            <para>
            <b>Implementation Considerations</b>
            </para>
            <para>
            The current thread is assumed to hold the lock associated with this
            <c>Condition</c> when this method is called.
            It is up to the implementation to determine if this is
            the case and if not, how to respond. Typically, an exception will be
            thrown (such as <see cref="T:System.Threading.SynchronizationLockException"/>) and the
            implementation must document that fact.
            </para>
            <para>
            An implementation can favor responding to an interrupt over normal
            method return in response to a signal, or over indicating the elapse
            of the specified waiting time. In either case the implementation
            must ensure that the signal is redirected to another waiting thread, if
            there is one.
            </para>
            </remarks>
            <param name="timeSpan">The maximum time to wait.</param>
            <returns>
            <c>false</c> if the waiting time detectably elapsed
            before return from the method, else <c>true</c>.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            If the current thread is interrupted ( and interruption of thread
            suspension is supported.
            </exception>
        </member>
        <member name="M:Spring.Threading.Locks.ICondition.AwaitUntil(System.DateTime)">
            <summary>
            Causes the current thread to wait until it is signalled or interrupted,
            or the specified deadline elapses.
            </summary>
            <remarks>
            <para>
            The lock associated with this condition is atomically
            released and the current thread becomes disabled for thread scheduling
            purposes and lies dormant until <b>one</b> of five things happens:
            <list type="bullet">
            <item>Some other thread invokes the <see cref="M:Spring.Threading.Locks.ICondition.Signal"/> method for this
            <see cref="T:Spring.Threading.Locks.ICondition"/> and the current thread happens to be chosen as the
            thread to be awakened.</item>
            <item>Some other thread invokes the <see cref="M:Spring.Threading.Locks.ICondition.SignalAll"/>} method for this
            <see cref="T:Spring.Threading.Locks.ICondition"/>.</item>
            <item>Some other thread <see cref="M:System.Threading.Thread.Interrupt"/> is called the current
            thread, and interruption of thread suspension is supported.</item>
            <item>The specified deadline elapses.</item>	
            <item>A '<b>spurious wakeup</b>' occurs.</item>
            </list>
            </para>
            <para>
            In all cases, before this method can return the current thread must
            re-acquire the lock associated with this condition. When the
            thread returns it is <b>guaranteed</b> to hold this lock.
            </para>
            <para>
            If the current thread:
            <list type="bullet">
            <item>has its interrupted status set on entry to this method</item>
            <item><see cref="M:System.Threading.Thread.Interrupt"/> is called while waiting
            and interruption of thread suspension is supported</item>
            </list>
            then <see cref="T:System.Threading.ThreadInterruptedException"/> is thrown and the current thread's
            interrupted status is cleared. It is not specified, in the first
            case, whether or not the test for interruption occurs before the lock
            is released.
            </para>
            <example>
            The return value indicates whether the deadline has elapsed,
            which can be used as follows:
            <code>
            	bool AMethod(DateTime deadline) {
            		bool stillWaiting = true;
            		while (!conditionBeingWaitedFor) {
            				if (stillWaiting)
            						stillWaiting = theCondition.AwaitUntil(deadline);
            				else
            						return false;
            				}
            		// ...
            		}
            	}
            </code>
            </example>
            <para>
            <b>Implementation Considerations</b>
            </para>
            <para>
            The current thread is assumed to hold the lock associated with this
            <see cref="T:Spring.Threading.Locks.ICondition"/> when this method is called.
            It is up to the implementation to determine if this is
            the case and if not, how to respond. Typically, an exception will be
            thrown (such as <see cref="T:System.Threading.SynchronizationLockException"/>) and the
            implementation must document that fact.
            </para>
            <para>
            An implementation can favor responding to an interrupt over normal
            method return in response to a signal, or over indicating the passing
            of the specified deadline. In either case the implementation
            must ensure that the signal is redirected to another waiting thread, if
            there is one.
            </para>
            </remarks>
            <param name="deadline">The absolute UTC time to wait.</param>
            <returns> 
            <c>false</c> if the deadline has elapsed upon return, else <c>true</c>.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            If the current thread is interrupted ( and interruption of thread
            suspension is supported.
            </exception>
        </member>
        <member name="M:Spring.Threading.Locks.ICondition.Signal">
            <summary> 
            Wakes up one waiting thread.
            If any threads are waiting on this condition then one
            is selected for waking up. That thread must then re-acquire the
            lock before returning from await.
            </summary>
        </member>
        <member name="M:Spring.Threading.Locks.ICondition.SignalAll">
            <summary> 
            Wakes up all waiting threads.
            If any threads are waiting on this condition then they are
            all woken up. Each thread must re-acquire the lock before it can
            return from await.
            </summary>
        </member>
        <member name="M:Spring.Threading.Locks.ConditionVariable.#ctor(Spring.Threading.Locks.ConditionVariable.IExclusiveLock)">
            <summary> 
            Create a new <see cref="T:Spring.Threading.Locks.ConditionVariable"/> that relies on the given mutual
            exclusion lock.
            </summary>
            <param name="lock">
            A non-reentrant mutual exclusion lock.
            </param>
        </member>
        <member name="T:Spring.Threading.Locks.ILock">
            <summary> 
            <see cref="T:Spring.Threading.Locks.ILock"/> implementations provide more extensive locking
            operations than can be obtained using <see cref="T:System.Threading.Monitor"/> class and 
            <c>lock</c> statements.  They allow more flexible structuring, may have
            quite different properties, and may support multiple associated
            <see cref="T:Spring.Threading.Locks.ICondition"/> objects.
            </summary>
            <remarks>
            <para>
            A lock is a tool for controlling access to a shared resource by
            multiple threads. Commonly, a lock provides exclusive access to a
            shared resource: only one thread at a time can acquire the lock and
            all access to the shared resource requires that the lock be
            acquired first. However, some locks may allow concurrent access to
            a shared resource, such as the read lock of a <see cref="!:IReadWriteLock"/> 
            </para>
            <para>
            The use of <see cref="T:System.Threading.Monitor"/> class or <c>lock</c> statement provides
            access to the implicit monitor lock associated with every object, but
            forces all lock acquisition and release to occur in a block-structured way:
            when multiple locks are acquired they must be released in the opposite
            order, and all locks must be released in the same lexical scope in which
            they were acquired.
            </para>
            <para>
            While the scoping mechanism for <see cref="T:System.Threading.Monitor"/> or <c>lock</c>
            statements makes it much easier to program with monitor locks,
            and helps avoid many common programming errors involving locks,
            there are occasions where you need to work with locks in a more
            flexible way. For example, some algorithms for traversing
            concurrently accessed data structures require the use of
            'hand-over-hand' or 'chain locking': you
            acquire the lock of node A, then node B, then release A and acquire
            C, then release B and acquire D and so on.  Implementations of the
            <see cref="T:Spring.Threading.Locks.ILock"/> interface enable the use of such techniques by
            allowing a lock to be acquired and released in different scopes,
            and allowing multiple locks to be acquired and released in any
            order.
            </para>
            <para>
            With this increased flexibility comes additional responsibility. The
            absence of block-structured locking removes the automatic release of
            locks that occurs with <c>lock</c> statements. In most cases, the
            following idiom should be used:
            
            <code>
            ILock l = ...;
            l.Lock();
            try {
                // access the resource protected by this lock
            } finally {
            	l.Unlock();
            }
            </code> 
            -or-
            <code>
            ILock l = ...;
            using(l.Lock())
            {
            // access the resource protected by this lock
            }
            </code> 
            </para>
            <para>
            When locking and unlocking occur in different scopes, care must be
            taken to ensure that all code that is executed while the lock is
            held is protected by try-finally or try-catch to ensure that the
            lock is released when necessary.
            </para>
            <para>
            <see cref="T:Spring.Threading.Locks.ILock"/> implementations provide additional functionality
            over the use of <see cref="T:System.Threading.Monitor"/> class and <c>lock</c> statement
            by providing a non-blocking attempt to acquire a lock 
            (<see cref="M:Spring.Threading.Locks.ILock.TryLock"/>), an attempt to acquire the lock that can be
            interrupted <see cref="M:Spring.Threading.Locks.ILock.LockInterruptibly"/>}, and an attempt to acquire
            the lock that can timeout (<see cref="M:Spring.Threading.Locks.ILock.TryLock(System.TimeSpan)"/>).
            </para>
            <para>
            An <see cref="T:Spring.Threading.Locks.ILock"/> class can also provide behavior and semantics
            that is quite different from that of the implicit monitor lock,
            such as guaranteed ordering, non-reentrant usage, or deadlock
            detection. If an implementation provides such specialized semantics
            then the implementation must document those semantics.
            </para>
            <para>
            Note that <see cref="T:Spring.Threading.Locks.ILock"/> instances are just normal objects and can
            themselves be used as the target in a <c>lock</c> statement. Acquiring
            the monitor lock of a <see cref="T:Spring.Threading.Locks.ILock"/> instance has no specified
            relationship with invoking any of the <see cref="M:Spring.Threading.Locks.ILock.Lock"/> methods of
            that instance. It is recommended that to avoid confusion you never use
            <see cref="T:Spring.Threading.Locks.ILock"/> instances in this way, except within their own
            implementation.
            </para>
            <para>
            Except where noted, passing a <c>null</c> value for any parameter will
            result in a <see cref="T:System.NullReferenceException"/> being thrown.
            </para>
            <para>
            <b>Memory Synchronization</b>
            <br/>
            All <see cref="T:Spring.Threading.Locks.ILock"/> implementations <b>must</b> enforce the same
            memory synchronization semantics as provided by the built-in monitor
            lock. 
            <list type="bullet">
            <item>A successful <see cref="M:Spring.Threading.Locks.ILock.Lock"/> operation has the same memory
            synchronization effects as a successful <see cref="M:System.Threading.Monitor.Enter(System.Object)"/>
            action.</item>
            <item>A successful <see cref="M:Spring.Threading.Locks.ILock.Unlock"/> operation has the same memory
            synchronization effects as a successful <see cref="M:System.Threading.Monitor.Exit(System.Object)"/>
            action.</item>
            </list>
            Unsuccessful locking and unlocking operations, and reentrant
            locking/unlocking operations, do not require any memory synchronization
            effects.
            </para>
            <para>
            <b>Implementation Considerations</b>
            <list type="bullet">
            <item>
            The three forms of lock acquisition (interruptible, non-interruptible, 
            and timed) may differ in their performance characteristics, ordering
            guarantees, or other implementation qualities.  Further, the ability
            to interrupt the <b>ongoing</b> acquisition of a lock may not be
            available in a given <see cref="T:Spring.Threading.Locks.ILock"/> class.  Consequently, an
            implementation is not required to define exactly the same guarantees
            or semantics for all three forms of lock acquisition, nor is it
            required to support interruption of an ongoing lock acquisition.  An
            implementation is required to clearly document the semantics and
            guarantees provided by each of the locking methods. It must also obey
            the interruption semantics as defined in this interface, to the extent
            that interruption of lock acquisition is supported: which is either
            totally, or only on method entry.
            </item>
            <item>
            As interruption generally implies cancellation, and checks for
            interruption are often infrequent, an implementation can favor responding
            to an interrupt over normal method return. This is true even if it can be
            shown that the interrupt occurred after another action may have unblocked
            the thread. An implementation should document this behavior.
            </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:Spring.Threading.Locks.ReentrantLock"/>
            <seealso cref="T:Spring.Threading.Locks.ICondition"/>
            <seealso cref="T:Spring.Threading.Locks.IReadWriteLock"/>
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Kenneth Xu</author>
        </member>
        <member name="M:Spring.Threading.Locks.ILock.Lock">
            <summary> 
            Acquires the lock. If the lock is not available then the current
            thread becomes disabled for thread scheduling purposes and lies
            dormant until the lock has been acquired.
            </summary>
            <remarks>
            <para>
            <b>Implementation Considerations</b>
            <br/>
            An <see cref="T:Spring.Threading.Locks.ILock"/> implementation may be able to detect
            erroneous use of the lock, such as an invocation that would cause
            deadlock, and may throw an exception in such circumstances. The
            circumstances and the exception type must be documented by that
            <see cref="T:Spring.Threading.Locks.ILock"/> implementation.
            </para>
            </remarks>
            <returns>
            An <see cref="T:System.IDisposable"/> that <see cref="M:Spring.Threading.Locks.ILock.Unlock"/>s the lock
            upon <see cref="M:System.IDisposable.Dispose"/>.
            </returns>
        </member>
        <member name="M:Spring.Threading.Locks.ILock.LockInterruptibly">
            <summary> 
            Acquires the lock if it is available and returns immediately, or
            wait for the lock to become available unless the current thread is
            interrupted by a call to <see cref="M:System.Threading.Thread.Interrupt"/>.
            </summary>
            <remarks>
            <para>
            If the lock is not available then the current thread becomes
            disabled for thread scheduling purposes and lies dormant until one
            of two things happens:
            <list type="bullet">
            <item>The lock is acquired by the current thread.</item>
            <item>Some other thread interrupts the current thread by calling
            <see cref="M:System.Threading.Thread.Interrupt"/>, and interruption of lock
            acquisition is supported.</item>
            </list>
            </para>
            <para>
            If the current thread:
            <list type="bullet">
            <item>has its interrupted status set on entry to this method</item>
            <item>is interrupted while acquiring the lock, and interruption of
            lock acquisition is supported</item>
            </list>
            then <see cref="T:System.Threading.ThreadInterruptedException"/> is thrown and the
            current thread's interrupted status is cleared.
            </para>
            <para>
            <b>Implementation Considerations</b>
            <br/>
            The ability to interrupt a lock acquisition in some implementations
            may not be possible, and if possible may be an expensive operation.
            The programmer should be aware that this may be the case. An
            implementation should document when this is the case.
            </para>
            <para>
            An implementation can favor responding to an interrupt over
            normal method return.
            </para>
            <para>
            A <see cref="T:Spring.Threading.Locks.ILock"/> implementation may be able to detect
            erroneous use of the lock, such as an invocation that would cause
            deadlock, and may throw an exception in such circumstances.  The
            circumstances and the exception type must be documented by that
            <see cref="T:Spring.Threading.Locks.ILock"/> implementation.
            </para>
            </remarks>
            <returns>
            An <see cref="T:System.IDisposable"/> that <see cref="M:Spring.Threading.Locks.ILock.Unlock"/>s the lock
            open <see cref="M:System.IDisposable.Dispose"/>.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            If the current thread is interrupted while acquiring the lock (and
            interruption of lock acquisition is supported).
            </exception>
            <seealso cref="M:System.Threading.Thread.Interrupt"/>
        </member>
        <member name="M:Spring.Threading.Locks.ILock.TryLock">
            <summary> 
            Acquires the lock only if it is free at the time of invocation.
            </summary>
            <remarks>
            <para>
            Acquires the lock if it is available and returns immediately with
            the value <c>true</c>.  If the lock is not available then this
            method will return immediately with the value <c>false</c>.
            </para>
            <para>
            A typical usage idiom for this method would be:
            <code> 
            ILock lock = ...;
            if (lock.TryLock()) {
            	try {
            	// manipulate protected state
            	} finally {
            		lock.Unlock();
            	}
            } else {
            	// perform alternative actions
            }
            </code>
            </para>
            <para>
            This usage ensures that the lock is unlocked if it was acquired,
            and doesn't try to unlock if the lock was not acquired.
            </para>
            </remarks>
            <returns>
            <c>true</c> if the lock was acquired and <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Threading.Locks.ILock.TryLock(System.TimeSpan)">
            <summary> 
            Acquires the lock if it is free within the specified
            <paramref name="timeSpan"/> time and the current thread has not
            been interrupted by calling <see cref="M:System.Threading.Thread.Interrupt"/>.
            </summary>
            <remark>
            <para>
            If the lock is available this method returns immediately with the
            value <c>true</c>. If the lock is not available then the current
            thread becomes disabled for thread scheduling purposes and lies
            dormant until one of three things happens:
            <list type="bullet">
            <item>The lock is acquired by the current thread.</item>
            <item>Some other thread interrupts the current thread, and
            interruption of lock acquisition is supported.</item>
            <item>The specified <paramref name="timeSpan"/> elapses.</item>
            </list>
            </para>
            <para>
            If the lock is acquired then the value <c>true</c> is returned.
            </para>
            <para>
            If the current thread:
            <list type="bullet">
            <item>has its interrupted status set on entry to this method;</item>
            <item>is interrupted while acquiring the lock, and interruption of
            lock acquisition is supported.</item>
            </list>
            then <see cref="T:System.Threading.ThreadInterruptedException"/> is thrown and the
            current thread's interrupted status is cleared.
            </para>
            <para>
            If the specified <paramref name="timeSpan"/> elapses then the value
            <c>false</c> is returned.  If the <paramref name="timeSpan"/> is
            less than or equal to zero, the method will not wait at all.
            </para>
            <para>
            <b>Implementation Considerations</b>
            <br/>
            The ability to interrupt a lock acquisition in some implementations
            may not be possible, and if possible may be an expensive operation.
            The programmer should be aware that this may be the case. An
            implementation should document when this is the case.
            </para>
            <para>
            An implementation can favor responding to an interrupt over normal
            method return, or reporting a timeout.
            </para>
            <para>
            An <see cref="T:Spring.Threading.Locks.ILock"/> implementation may be able to detect
            erroneous use of the lock, such as an invocation that would cause
            deadlock, and may throw an exception in suchcircumstances. The
            circumstances and the exception type must be documented by that
            <see cref="T:Spring.Threading.Locks.ILock"/> implementation.
            </para>
            </remark>
            <param name="timeSpan">
            The specificed <see cref="T:System.TimeSpan"/> to wait to aquire lock.
            </param>
            <returns>
            <c>true</c> if the lock was acquired and <c>false</c> if the
            waiting time elapsed before the lock was acquired.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            If the current thread is interrupted while aquirign the lock (and
            interruption of lock acquisition is supported).
            </exception>
            <seealso cref="M:System.Threading.Thread.Interrupt"/>
        </member>
        <member name="M:Spring.Threading.Locks.ILock.Unlock">
            <summary> 
            Releases the lock.
            </summary>
            <remarks>
            <b>Implementation Considerations</b>
            <br/>
            An <see cref="T:Spring.Threading.Locks.ILock"/> implementation will usually impose
            restrictions on which thread can release a lock (typically only the
            holder of the lock can release it) and may throw an exception if
            the restriction is violated. Any restrictions and the exception
            type must be documented by that <see cref="T:Spring.Threading.Locks.ILock"/> implementation.
            </remarks>
        </member>
        <member name="M:Spring.Threading.Locks.ILock.NewCondition">
            <summary> 
            Returns a new <see cref="T:Spring.Threading.Locks.ICondition"/> instance that is bound to
            this <see cref="T:Spring.Threading.Locks.ILock"/> instance.
            </summary>
            <remarks>
            <para>
            Before waiting on the condition the lock must be held by the
            current thread.  A call to <see cref="M:Spring.Threading.Locks.ICondition.Await"/> will
            atomically release the lock before waiting and re-acquire the lock
            before the wait returns.
            </para>
            <para>
            <b>Implementation Considerations</b>
            <br/>
            The exact operation of the <see cref="T:Spring.Threading.Locks.ICondition"/> instance
            depends on the <see cref="T:Spring.Threading.Locks.ILock"/> implementation and must be
            documented by that implementation.
            </para>
            </remarks>
            <returns>
            A new <see cref="T:Spring.Threading.Locks.ICondition"/> instance for this 
            <see cref="T:Spring.Threading.Locks.ILock"/> instance.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If this <see cref="T:Spring.Threading.Locks.ILock"/> implementation does not support
            conditions.
            </exception>
        </member>
        <member name="T:Spring.Threading.Locks.FIFOConditionVariable">
            <author>Doug Lea</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Kenneth Xu</author>
        </member>
        <member name="M:Spring.Threading.Locks.FIFOConditionVariable.#ctor(Spring.Threading.Locks.ConditionVariable.IExclusiveLock)">
            <summary>
            Create a new <see cref="T:Spring.Threading.Locks.FIFOConditionVariable"/> that relies on the
            given mutual exclusion lock.
            </summary>
            <param name="lock">A non-reentrant mutual exclusion lock.</param>
        </member>
        <member name="T:Spring.Threading.Locks.ReentrantLock">
            <summary> 
            A reentrant mutual exclusion <see cref="T:Spring.Threading.Locks.ILock"/> with the same basic
            behavior and semantics as the implicit monitor lock accessed using
            <c>lock</c> statements, but with extended capabilities.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Spring.Threading.Locks.ReentrantLock"/> is <b>owned</b> by the thread last
            successfully locking, but not yet unlocking it. A thread invoking
            <see cref="M:Spring.Threading.Locks.ReentrantLock.Lock"/> will return, successfully acquiring the lock, when
            the lock is not owned by another thread. The method will return
            immediately if the current thread already owns the lock. This can
            be checked using methods <see cref="P:Spring.Threading.Locks.ReentrantLock.IsHeldByCurrentThread"/>, and 
            <see cref="P:Spring.Threading.Locks.ReentrantLock.HoldCount"/>.
            </para>
            <para>
            The constructor for this class accepts an optional
            <b>fairness</b> parameter.  When set <c>true</c>, under
            contention, locks favor granting access to the longest-waiting
            thread.  Otherwise this lock does not guarantee any particular
            access order.  Programs using fair locks accessed by many threads
            may display lower overall throughput (i.e., are slower; often much
            slower) than those using the default setting, but have smaller
            variances in times to obtain locks and guarantee lack of
            starvation. Note however, that fairness of locks does not guarantee
            fairness of thread scheduling. Thus, one of many threads using a
            fair lock may obtain it multiple times in succession while other
            active threads are not progressing and not currently holding the
            lock.
            Also note that the untimed <see cref="M:Spring.Threading.Locks.ReentrantLock.TryLock"/> method does not
            honor the fairness setting. It will succeed if the lock
            is available even if other threads are waiting.
            </para>
            <para>
            It is recommended practice to <b>always</b> immediately follow a call 
            to <see cref="M:Spring.Threading.Locks.ReentrantLock.Lock"/> with a <c>try</c> block or make user of
            the <c>using</c> keyward in C#, most typically in a before/after 
            construction such as:
            
            <code>
            class X {
            	private ReentrantLock lock = new ReentrantLock();
            	// ...
            
            	public void m() {
            		lock.Lock();  // block until condition holds
            		try {
            			// ... method body
            		} finally {
            			lock.Unlock()
            		}
            	}
            }
            </code>
            </para>
            <para>
            In addition to implementing the <see cref="T:Spring.Threading.Locks.ILock"/> interface, this
            class defines methods <see cref="P:Spring.Threading.Locks.ReentrantLock.IsLocked"/> and
            <see cref="M:Spring.Threading.Locks.ReentrantLock.GetWaitQueueLength(Spring.Threading.Locks.ICondition)"/> , as well as some associated
            <c>protected</c> access methods that may be useful for
            instrumentation and monitoring.
            </para>
            <para>
            Serialization of this class behaves in the same way as built-in
            locks: a deserialized lock is in the unlocked state, regardless of
            its state when serialized.
            </para>
            <para>
            This lock supports a maximum of 2147483648 recursive locks by
            the same thread.
            </para>
            </remarks>
            <author>Doug Lea</author>
            <author>Dawid Kurzyniec</author>
            <author>Griffin Caprio (.NET)</author>
            <author>Kenneth Xu (.NET)</author>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.#ctor">
            <summary> Creates an instance of <see cref="T:Spring.Threading.Locks.ReentrantLock"/>.
            This is equivalent to using <tt>ReentrantLock(false)</tt>.
            </summary>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.#ctor(System.Boolean)">
            <summary> 
            Creates an instance of <see cref="T:Spring.Threading.Locks.ReentrantLock"/> with the
            given fairness policy.
            </summary>
            <param name="fair"><c>true</c> if this lock will be fair, else <c>false</c>
            </param>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.Lock">
            <summary>
            Acquires the lock and returns an <see cref="T:System.IDisposable"/> that
            can be used to unlock when disposed.
            </summary>
            <remarks>
            <para>
            Acquires the lock if it is not held by another thread and returns
            immediately, setting the lock hold count to one.
            </para>
            <para>
            If the <see cref="P:System.Threading.Thread.CurrentThread">current thread</see>
            already holds the lock then the hold count is incremented by one and
            the method returns immediately.
            </para>
            <para>
            If the lock is held by another thread then the
            current thread becomes disabled for thread scheduling
            purposes and lies dormant until the lock has been acquired,
            at which time the lock hold count is set to one.
            </para>
            <example>
            Below is a typical use of <see cref="M:Spring.Threading.Locks.ReentrantLock.Lock"/>
            <code language="c#">
            ReentrantLock reentrantLock = ...;
            
            using(reentrantLock.Lock())
            {
               // locked
            }
            // unlocked.
            </code>
            it is equvilant to
            <code language="c#">
            ReentrantLock reentrantLock = ...;
            
            reentrantLock.Lock();
            try {
                // locked
            }
            finally
            {
                reentrantLock.Unlock();
            }
            // unlocked
            </code>
            </example>
            </remarks>
            <returns>
            An <see cref="T:System.IDisposable"/> object that unlocks current 
            <see cref="T:Spring.Threading.Locks.ReentrantLock"/> when it is disposed.
            </returns>
            <seealso cref="M:Spring.Threading.Locks.ReentrantLock.LockInterruptibly"/>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.LockInterruptibly">
            <summary> 
            Acquires the lock unless <see cref="M:System.Threading.Thread.Interrupt"/> is called on the current thread
            
            <p/>
            Acquires the lock if it is not held by another thread and returns
            immediately, setting the lock hold count to one.
            
            <p/>
            If the current thread already holds this lock then the hold count
            is incremented by one and the method returns immediately.
            
            <p/>
            If the lock is held by another thread then the
            current thread becomes disabled for thread scheduling
            purposes and lies dormant until one of two things happens:
            
            <list type="bullet">
            <item>The lock is acquired by the current thread</item>
            <item>Some other thread calls <see cref="M:System.Threading.Thread.Interrupt"/> on the current thread.</item>
            </list>
            
            <p/>If the lock is acquired by the current thread then the lock hold
            count is set to one.
            
            <p/>If the current thread:
            
            <list type="bullet">
            <item>has its interrupted status set on entry to this method</item> 
            <item><see cref="M:System.Threading.Thread.Interrupt"/> is called while acquiring the lock</item>
            </list>
            
            then <see cref="T:System.Threading.ThreadInterruptedException"/> is thrown and the current thread's
            interrupted status is cleared.
            
            <p/>
            In this implementation, as this method is an explicit interruption
            point, preference is given to responding to the interrupt over normal or reentrant
            acquisition of the lock.
            </summary>
            <exception cref="T:System.Threading.ThreadInterruptedException">if the current thread is interrupted</exception>
            
            <summary>
            Acquires the lock unless <see cref="M:System.Threading.Thread.Interrupt"/> is called 
            on the current thread. Returns an <see cref="T:System.IDisposable"/> that
            can be used to unlock if the lock is sucessfully obtained.
            </summary>
            <remarks>
            <para>
            Acquires the lock if it is not held by another thread and returns
            immediately, setting the lock hold count to one.
            </para>
            <para>
            If the current thread already holds this lock then the hold count
            is incremented by one and the method returns immediately.
            </para>
            <para>
            If the lock is held by another thread then the
            current thread becomes disabled for thread scheduling
            purposes and lies dormant until one of two things happens:
            </para>
            <list type="bullet">
            <item>
            The lock is acquired by the current thread.
            </item>
            <item>
            Some other thread calls <see cref="M:System.Threading.Thread.Interrupt"/> on the current thread.
            </item>
            </list>
            <para>
            If the lock is acquired by the current thread then the lock hold
            count is set to one.
            </para>
            <para>
            If the current thread:
            </para>
            <list type="bullet">
            <item>has its interrupted status set on entry to this method</item> 
            <item><see cref="M:System.Threading.Thread.Interrupt"/> is called while acquiring the lock</item>
            </list>
            <para>
            then <see cref="T:System.Threading.ThreadInterruptedException"/> is thrown and the current thread's
            interrupted status is cleared.
            </para>
            <para>
            In this implementation, as this method is an explicit interruption
            point, preference is given to responding to the interrupt over normal or reentrant
            acquisition of the lock.
            </para>
            <example>
            Below is a typical use of <see cref="M:Spring.Threading.Locks.ReentrantLock.LockInterruptibly"/>
            <code language="c#">
            ReentrantLock reentrantLock = ...;
            
            using(reentrantLock.LockInterruptibly())
            {
               // locked
            }
            // unlocked.
            </code>
            it is equvilant to
            <code language="c#">
            ReentrantLock reentrantLock = ...;
            
            reentrantLock.LockInterruptibly();
            try {
                // locked
            }
            finally
            {
                reentrantLock.Unlock();
            }
            // unlocked
            </code>
            </example>
            </remarks>
            <returns>
            An <see cref="T:System.IDisposable"/> object that unlocks current 
            <see cref="T:Spring.Threading.Locks.ReentrantLock"/> when it is disposed.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">
            If the current thread is interrupted.
            </exception>
            <seealso cref="M:Spring.Threading.Locks.ReentrantLock.Lock"/>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.TryLock">
            <summary> 
            Acquires the lock only if it is not held by another thread at the time
            of invocation.
            
            <p/>
            Acquires the lock if it is not held by another thread and
            returns immediately with the value <c>true</c>, setting the
            lock hold count to one. Even when this lock has been set to use a
            fair ordering policy, a call to <see cref="M:Spring.Threading.Locks.ReentrantLock.TryLock"/> <b>will</b>
            immediately acquire the lock if it is available, whether or not
            other threads are currently waiting for the lock.
            This "barging" behavior can be useful in certain
            circumstances, even though it breaks fairness. If you want to honor
            the fairness setting for this lock, then use
            <see cref="M:Spring.Threading.Locks.ReentrantLock.TryLock(System.TimeSpan)"/>
            which is almost equivalent (it also detects interruption).
            
            <p/> 
            If the current thread
            already holds this lock then the hold count is incremented by one and
            the method returns <c>true</c>.
            
            <p/>
            If the lock is held by another thread then this method will return
            immediately with the value <c>false</c>.
            
            </summary>
            <returns> <c>true</c> if the lock was free and was acquired by the
            current thread, or the lock was already held by the current thread,
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.TryLock(System.TimeSpan)">
            <summary> 
            Acquires the lock if it is not held by another thread within the given
            waiting time and <see cref="M:System.Threading.Thread.Interrupt"/> hasn't been called on the current thread
            
            <p/>
            Acquires the lock if it is not held by another thread and returns
            immediately with the value <c>true</c>, setting the lock hold count
            to one. If this lock has been set to use a fair ordering policy then
            an available lock <b>will not</b> be acquired if any other threads
            are waiting for the lock. This is in contrast to the <see cref="M:Spring.Threading.Locks.ReentrantLock.TryLock"/> 
            method. If you want a timed <see cref="M:Spring.Threading.Locks.ReentrantLock.TryLock"/> that does permit barging on
            a fair lock then combine the timed and un-timed forms together:
            
            <code>
            if (lock.TryLock() || lock.TryLock(timeSpan) ) { ... }
            </code>
            
            <p/>
            If the current thread
            already holds this lock then the hold count is incremented by one and
            the method returns <c>true</c>.
            
            <p/>
            If the lock is held by another thread then the
            current thread becomes disabled for thread scheduling
            purposes and lies dormant until one of three things happens:
            
            <list type="bullet">
            <item>The lock is acquired by the current thread</item>	
            <item>Some other thread calls <see cref="M:System.Threading.Thread.Interrupt"/> the current thread</item>
            <item>The specified waiting time elapses</item>
            </list>
            
            <p/>
            If the lock is acquired then the value <c>true</c> is returned and
            the lock hold count is set to one.
            
            <p/>If the current thread:
            <list type="bullet">
            <item>has its interrupted status set on entry to this method</item>	
            <item>has <see cref="M:System.Threading.Thread.Interrupt"/> called on it while acquiring the lock</item>	
            </list>
            
            then <see cref="T:System.Threading.ThreadInterruptedException"/> is thrown and the current thread's
            interrupted status is cleared.
            
            <p/>
            If the specified waiting time elapses then the value <c>false</c>
            is returned.  If the time is less than or equal to zero, the method will not wait at all.
            
            <p/>
            In this implementation, as this method is an explicit interruption
            point, preference is given to responding to the interrupt over normal or reentrant
            acquisition of the lock, and over reporting the elapse of the waiting
            time.
            
            </summary>
            <param name="timeSpan">the <see cref="T:System.TimeSpan"/> to wait for the lock</param>
            <returns> <c>true</c> if the lock was free and was acquired by the
            current thread, or the lock was already held by the current thread; and
            <c>false</c> if the waiting time elapsed before the lock could be
            acquired.
            </returns>
            <throws>  InterruptedException if the current thread is interrupted </throws>
            <throws>  NullPointerException if unit is null </throws>
            <exception cref="T:System.NullReferenceException">If <paramref name="timeSpan"/> is null</exception>
            <exception cref="T:System.Threading.ThreadInterruptedException">If the current thread is interrupted</exception>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.Unlock">
            <summary> 
            Attempts to release this lock.
            <p/>
            If the current thread is the
            holder of this lock then the hold count is decremented. If the
            hold count is now zero then the lock is released.  If the
            current thread is not the holder of this lock then <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
            <exception cref="T:System.Threading.SynchronizationLockException">if the current thread does not hold this lock.</exception>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.NewCondition">
            <summary> 
            Returns a <see cref="T:Spring.Threading.Locks.ICondition"/> instance for use with this
            <see cref="T:Spring.Threading.Locks.ILock"/> instance.
            
            <p/>
            The returned <see cref="T:Spring.Threading.Locks.ICondition"/> instance supports the same
            usages as do the <see cref="T:System.Threading.Monitor"/> methods <see cref="M:System.Threading.Monitor.Wait(System.Object)"/>,
            <see cref="M:System.Threading.Monitor.Pulse(System.Object)"/>, and <see cref="M:System.Threading.Monitor.PulseAll(System.Object)"/>) when used with the built-in
            monitor lock.
            <list type="bullet">
            <item>
            If this lock is not held when either 
            <see cref="M:Spring.Threading.Locks.ICondition.Await"/> or <see cref="M:Spring.Threading.Locks.ICondition.Signal"/>
            methods are called, then an <see cref="T:System.InvalidOperationException"/>  is thrown.</item>
            <item>When the condition <see cref="T:Spring.Threading.Locks.ICondition"/>await() waiting}
            methods are called the lock is released and, before they
            return, the lock is reacquired and the lock hold count restored
            to what it was when the method was called.</item>
            <item>If <see cref="M:System.Threading.Thread.Interrupt"/> is called while
            waiting then the wait will terminate, an <see cref="T:System.Threading.ThreadInterruptedException"/>
            and the thread's interrupted status will be cleared.</item>
            <item> Waiting threads are signalled in FIFO order</item>
            <item>
            The ordering of lock reacquisition for threads returning
            from waiting methods is the same as for threads initially
            acquiring the lock, which is in the default case not specified,
            but for <b>fair</b> locks favors those threads that have been
            waiting the longest.</item>
            </list>
            </summary>
            <returns> the ICondition object
            </returns>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.IsQueuedThread(System.Threading.Thread)">
            <summary> 
            Queries whether the <paramref name="thread"/> is waiting to acquire this
            lock. Note that because cancellations may occur at any time, a
            <c>true</c> return does not guarantee that this thread
            will ever acquire this lock.  This method is designed primarily for use
            in monitoring of the system state.
            </summary>
            <param name="thread">the <see cref="T:System.Threading.Thread"/> instance.
            </param>
            <returns> <c>true</c> if the given thread is queued waiting for this lock, <c>false</c> otherwise.
            </returns>
            <throws>  NullPointerException if thread is null </throws>
            <exception cref="T:System.NullReferenceException">if <paramref name="thread"/> is null.</exception>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.HasWaiters(Spring.Threading.Locks.ICondition)">
            <summary> 
            Queries whether any threads are waiting on the <paramref name="condition"/>
            associated with this lock. Note that because timeouts and
            interrupts may occur at any time, a <c>true</c> return does
            not guarantee that a future <tt>signal</tt> will awaken any
            threads.  This method is designed primarily for use in
            monitoring of the system state.
            </summary>
            <param name="condition">the condition</param>
            <returns> <c>true</c> if there are any waiting threads.</returns>
            <exception cref="T:System.NullReferenceException">if the <paramref name="condition"/> is null</exception>
            <exception cref="T:System.ArgumentException">if the <paramref name="condition"/> is not associated with this lock</exception>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.GetWaitQueueLength(Spring.Threading.Locks.ICondition)">
            <summary> 
            Returns an estimate of the number of threads waiting on the
            <paramref name="condition"/> associated with this lock. Note that because
            timeouts and interrupts may occur at any time, the estimate
            serves only as an upper bound on the actual number of waiters.
            This method is designed for use in monitoring of the system
            state, not for synchronization control.
            </summary>
            <param name="condition">the condition</param>
            <returns> the estimated number of waiting threads.</returns>
            <exception cref="T:System.NullReferenceException">if the <paramref name="condition"/> is null</exception>
            <exception cref="T:System.ArgumentException">if the <paramref name="condition"/> is not associated with this lock</exception>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.GetWaitingThreads(Spring.Threading.Locks.ICondition)">
            <summary> 
            Returns a collection containing those threads that may be
            waiting on the <paramref name="condition"/> associated with this lock.
            Because the actual set of threads may change dynamically while
            constructing this result, the returned collection is only a
            best-effort estimate. The elements of the returned collection
            are in no particular order.  This method is designed to
            facilitate construction of subclasses that provide more
            extensive condition monitoring facilities.
            </summary>
            <param name="condition">the condition</param>
            <returns> the collection of threads waiting on <paramref name="condition"/></returns>
            <exception cref="T:System.NullReferenceException">if the <paramref name="condition"/> is null</exception>
            <exception cref="T:System.ArgumentException">if the <paramref name="condition"/> is not associated with this lock</exception>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.ToString">
            <summary> 
            Returns a string identifying this lock, as well as its lock
            state.  The state, in brackets, includes either the string
            'Unlocked' or the string 'Locked by'
            followed by the <see cref="P:System.Threading.Thread.Name"/>  of the owning thread.
            </summary>
            <returns> a string identifying this lock, as well as its lock state.</returns>
        </member>
        <member name="P:Spring.Threading.Locks.ReentrantLock.HoldCount">
            <summary> 
            Queries the number of holds on this lock by the current thread.
            
            <p/>
            A thread has a hold on a lock for each lock action that is not
            matched by an unlock action.
            
            <p/>
            The hold count information is typically only used for testing and
            debugging purposes. For example, if a certain section of code should
            not be entered with the lock already held then we can assert that
            fact:
            
            <code>
            class X {
            	ReentrantLock lock = new ReentrantLock();
            	// ...
            	public void m() {
            		Debug.Assert( lock.HoldCount() == 0 );
            		lock.Lock();
            		try {
            			// ... method body
            		} finally {
            			lock.Unlock();
            		}
            	}
            }
            </code>
            </summary>
            <returns> 
            The number of holds on this lock by the current thread,
            or zero if this lock is not held by the current thread.
            </returns>
        </member>
        <member name="P:Spring.Threading.Locks.ReentrantLock.IsHeldByCurrentThread">
            <summary> 
            Queries if this lock is held by the current thread.
            
            <p/>
            This method is typically used for debugging and
            testing. For example, a method that should only be called while
            a lock is held can assert that this is the case:
            
            <code>
            class X {
            	ReentrantLock lock = new ReentrantLock();
            	// ...
            
            	public void m() {
            		Debug.Assert( lock.IsHeldByCurrentThread );
            		// ... method body
            	}
            }
            </code>
            
            <p/>
            It can also be used to ensure that a reentrant lock is used
            in a non-reentrant manner, for example:
            
            <code>
            class X {
            	ReentrantLock lock = new ReentrantLock();
            	// ...
            
            	public void m() {
            		Debug.Assert( !lock.IsHeldByCurrentThread );
            		lock.Lock();
            		try {
            			// ... method body
            		} finally {
            			lock.Unlock();
            		}
            	}
            }
            </code>
            </summary>
            <returns> <c>true</c> if current thread holds this lock and
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Spring.Threading.Locks.ReentrantLock.IsLocked">
            <summary> 
            Queries if this lock is held by any thread. This method is
            designed for use in monitoring of the system state,
            not for synchronization control.
            </summary>
            <returns> <c>true</c> if any thread holds this lock and
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Spring.Threading.Locks.ReentrantLock.IsFair">
            <summary> Returns <c>true</c> if this lock has fairness set true.</summary>
            <returns> <c>true</c> if this lock has fairness set true.
            </returns>
        </member>
        <member name="P:Spring.Threading.Locks.ReentrantLock.Owner">
            <summary> 
            Returns the thread that currently owns this lock, or
            <c>null</c> if not owned. Note that the owner may be
            momentarily <c>null</c> even if there are threads trying to
            acquire the lock but have not yet done so.  This method is
            designed to facilitate construction of subclasses that provide
            more extensive lock monitoring facilities.
            </summary>
            <returns> the owner, or <c>null</c> if not owned.
            </returns>
        </member>
        <member name="P:Spring.Threading.Locks.ReentrantLock.QueueLength">
            <summary> 
            Returns an estimate of the number of threads waiting to
            acquire this lock.  The value is only an estimate because the number of
            threads may change dynamically while this method traverses
            internal data structures.  This method is designed for use in
            monitoring of the system state, not for synchronization
            control.
            </summary>
            <returns> the estimated number of threads waiting for this lock
            </returns>
        </member>
        <member name="P:Spring.Threading.Locks.ReentrantLock.HasQueuedThreads">
            <summary> 
            Queries whether any threads are waiting to acquire this lock. Note that
            because cancellations may occur at any time, a <c>true</c>
            return does not guarantee that any other thread will ever
            acquire this lock.  This method is designed primarily for use in
            monitoring of the system state.
            </summary>
            <returns> <c>true</c>if there may be other threads waiting to acquire
            the lock, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Spring.Threading.Locks.ReentrantLock.QueuedThreads">
            <summary> 
            Returns a collection containing threads that may be waiting to
            acquire this lock.  Since the actual set of threads may change
            dynamically while constructing this result, the returned
            collection is only a best-effort estimate.  The elements of the
            returned collection are in no particular order.  This method is
            designed to facilitate construction of subclasses that provide
            more extensive monitoring facilities.
            </summary>
            <returns> collection of threads
            </returns>
        </member>
        <member name="T:Spring.Threading.Locks.ReentrantLock.Sync">
            <summary>
            Base of synchronization control for this lock. Subclassed
            into fair and nonfair versions below.
            </summary>
        </member>
        <member name="M:Spring.Threading.Locks.ReentrantLock.NonfairSync.Lock">
            <summary>
            Performs lock.  Try immediate barge, backing up to normal acquire on failure.
            </summary>
        </member>
        <member name="T:Spring.SystemExtensions">
            <summary>
            Static class to provide extension methods to basic system function.
            </summary>
            <author>Kenneth Xu</author>
        </member>
        <member name="M:Spring.SystemExtensions.ToArrayOptimized``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert source to an array possibly in a more optimized way then
            <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
            <remarks>
            <para>
            If the source is a <see cref="T:System.Collections.Generic.List`1"/>, returns the result of
            <see cref="M:System.Collections.Generic.List`1.ToArray"/>.
            </para>
            <para>
            If the source is a <see cref="T:Spring.Collections.Generic.AbstractCollection`1"/>, returns the
            result of <see cref="M:Spring.Collections.Generic.AbstractCollection`1.ToArray"/>.
            </para>
            <para>
            Else, returns the result of <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/>.
            </para>
            </remarks>
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create an array from.
            </param>
            <returns>
            An array that contains the elements from <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Spring.SystemExtensions.IsCurrentThreadInterrupted">
            <summary>
            Tests whether the current thread has been interrupted.  The
            <i>interrupted status</i> of the thread is cleared by this method.
            In other words, if this method were to be called twice in 
            succession, the second call would return false (unless the current 
            thread were interrupted again, after the first call had cleared 
            its interrupted status and before the second call had examined it).
            </summary>
            <remarks>
            A thread interruption ignored because a thread was not alive at the 
            time of the interrupt will be reflected by this method returning 
            false.
            </remarks>
            <returns>
            <c>true</c> if the current thread has been interrupted; <c>false</c> 
            otherwise.
            </returns>
        </member>
        <member name="M:Spring.SystemExtensions.PreserveStackTrace``1(``0)">
            <summary>
            Lock the stack trace information of the given <paramref name="exception"/>
            so that it can be rethrow without losing the stack information.
            </summary>
            <remarks>
            <example>
                <code>
                try
                {
                    //...
                }
                catch( Exception e )
                {
                    //...
                    throw e.PreserveStackTrace(); //rethrow the exception - preserving the full call stack trace!
                }
                </code>
            </example>
            </remarks>
            <param name="exception">The exception to lock the statck trace.</param>
            <returns>The same <paramref name="exception"/> with stack traced locked.</returns>
        </member>
        <member name="T:Spring.Utility.SerializationUtilities">
            <summary>
            Collection of static methods that aid in serialization.
            </summary>
        </member>
        <member name="M:Spring.Utility.SerializationUtilities.DefaultWriteObject(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Object)">
            <summary>
            Writes the serializable fields to the SerializationInfo object, which stores all the data needed to serialize the specified object object.
            </summary>
            <param name="info">SerializationInfo parameter from the GetObjectData method.</param>
            <param name="context">StreamingContext parameter from the GetObjectData method.</param>
            <param name="instance">Object to serialize.</param>
        </member>
        <member name="M:Spring.Utility.SerializationUtilities.DefaultReadObject(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Object)">
            <summary>
            Reads the serialized fields written by the DefaultWriteObject method.
            </summary>
            <param name="info">SerializationInfo parameter from the special deserialization constructor.</param>
            <param name="context">StreamingContext parameter from the special deserialization constructor</param>
            <param name="instance">Object to deserialize.</param>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager">
            <summary>
            A rabbit transaction manager.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.connectionFactory">
            <summary>
            The connection factory.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager"/> class.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.#ctor(Spring.Messaging.Amqp.Rabbit.Connection.IConnectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager"/> class.
            </summary>
            <param name="connectionFactory">
            The connection factory.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.AfterPropertiesSet">
            <summary>
            Actions to perform after properties are set. Make sure the ConnectionFactory has been set.
            </summary>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.DoGetTransaction">
            <summary>
            Get the transaction.
            </summary>
            <returns>
            The transaction.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.IsExistingTransaction(System.Object)">
            <summary>
            Determines if the supplied object is an existing transaction.
            </summary>
            <param name="transaction">
            The transaction.
            </param>
            <returns>
            True if the object is an existing transaction, else false.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.DoBegin(System.Object,Spring.Transaction.ITransactionDefinition)">
            <summary>
            Do begin.
            </summary>
            <param name="transaction">
            The transaction.
            </param>
            <param name="definition">
            The definition.
            </param>
            <exception cref="T:Spring.Transaction.InvalidIsolationLevelException">
            </exception>
            <exception cref="T:Spring.Transaction.CannotCreateTransactionException">
            </exception>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.DoSuspend(System.Object)">
            <summary>
            Do suspend.
            </summary>
            <param name="transaction">
            The transaction.
            </param>
            <returns>
            The object.
            </returns>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.DoResume(System.Object,System.Object)">
            <summary>
            Do resume.
            </summary>
            <param name="transaction">
            The transaction.
            </param>
            <param name="suspendedResources">
            The suspended resources.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.DoCommit(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Do commit.
            </summary>
            <param name="status">
            The status.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.DoRollback(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Do rollback.
            </summary>
            <param name="status">
            The status.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.DoSetRollbackOnly(Spring.Transaction.Support.DefaultTransactionStatus)">
            <summary>
            Do set rollback only.
            </summary>
            <param name="status">
            The status.
            </param>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.DoCleanupAfterCompletion(System.Object)">
            <summary>
            Do cleanup after completion.
            </summary>
            <param name="transaction">
            The transaction.
            </param>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.ConnectionFactory">
            <summary>
            Gets or sets ConnectionFactory.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionManager.ResourceFactory">
            <summary>
            Gets ResourceFactory.
            </summary>
        </member>
        <member name="T:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionObject">
            <summary>
            A rabbit transaction object, representing a RabbitResourceHolder. Used as transaction object by RabbitTransactionManager.
            </summary>
        </member>
        <member name="F:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionObject.resourceHolder">
            <summary>
            The resource holder.
            </summary>
        </member>
        <member name="M:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionObject.Flush">
            <summary>
            Flush the object.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionObject.ResourceHolder">
            <summary>
            Gets or sets ResourceHolder.
            </summary>
        </member>
        <member name="P:Spring.Messaging.Amqp.Rabbit.Transaction.RabbitTransactionObject.RollbackOnly">
            <summary>
            Gets a value indicating whether RollbackOnly.
            </summary>
        </member>
    </members>
</doc>
